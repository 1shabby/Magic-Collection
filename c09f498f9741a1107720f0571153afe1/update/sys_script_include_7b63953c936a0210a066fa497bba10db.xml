<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_759224_magic_c_0.magic_utils</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description>Generic Utils for the Magic Collection application.</description>
        <mobile_callable>false</mobile_callable>
        <name>magic_utils</name>
        <sandbox_callable>true</sandbox_callable>
        <script><![CDATA[var magic_utils = Class.create();
magic_utils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

    /**
     * Description: Takes in set_id and returns the sys_id of the record on the system
     * Parameters: [string]: set_id - the string id used to identify a set;
     * Returns: [string]: sys_id of the set record from the system.
     */

    getSetRecord: function(set_id) {
        var setGr = new GlideRecord('x_759224_magic_c_0_mtg_sets');
        setGr.addQuery('id', set_id);
        setGr.query();
        setGr.next();
        return setGr.getUniqueValue();
    },

    /**
     * Description: Takes in an image string (generally the html one from a card) and grabs the source link of the image. If there isn't one, sets it to be the default mtg backing.
     * Parameters: [string]: img - The value from the image field on a card.
     * Returns: [string]: source url for the image, or the default back image.
     */

    getImgSrc: function(img) {
        var regex = /<img[^>]*\s+src=["']([^"']+)["']/i;
        //gs.info(img);
        if (img)
            var match = img.match(regex);
        var retval = '';
        if (match && match[1]) {
            retval = match[1];
        } else {
            retval = 'x_759224_magic_c_0.card-back.png';
        }
        return retval;
    },

    /**
     * Description: Takes in HTML from an HTML field and returns the content inside without HTML. 
     * Parameters: [string]: html - The HTML from a HTML field.
     * Returns: [string]: Contents inside of the HTML.
     */

    stripHTML: function(html) {
        return html.replace(/<[^>]*>/g, '');
    },

    /**
     * Description: Takes in an id string for a card. 
     * Parameters: [string]: id - The sys id of the card record.
     * Returns: [object]: cardData - JSON object containing all the data from the card record.
     */

    getCardData: function(id) {
        var cardGR = new GlideRecord('x_759224_magic_c_0_mtg_cards');
        cardGR.get('sys_id', id); // Get the card record.
        var cardData = {
            legality: { // Legalities for the card.
                alchemy: this.stripHTML(cardGR.getValue('alchemy_legality')) == 'Legal',
                brawl: this.stripHTML(cardGR.getValue('brawl_legality')) == 'Legal',
                commander: this.stripHTML(cardGR.getValue('commander_legality')) == 'Legal',
                duel: this.stripHTML(cardGR.getValue('duel_legality')) == 'Legal',
                future: this.stripHTML(cardGR.getValue('future_legality')) == 'Legal',
                gladiator: this.stripHTML(cardGR.getValue('gladiator_legality')) == 'Legal',
                historic: this.stripHTML(cardGR.getValue('historic_legality')) == 'Legal',
                legacy: this.stripHTML(cardGR.getValue('legacy_legality')) == 'Legal',
                modern: this.stripHTML(cardGR.getValue('modern_legality')) == 'Legal',
                oathbreaker: this.stripHTML(cardGR.getValue('oathbreaker_legality')) == 'Legal',
                oldschool: this.stripHTML(cardGR.getValue('oldschool_legality')) == 'Legal',
                pauper_commander: this.stripHTML(cardGR.getValue('paupercommander_legality')) == 'Legal',
                pauper: this.stripHTML(cardGR.getValue('pauper_legality')) == 'Legal',
                penny: this.stripHTML(cardGR.getValue('penny_legality')) == 'Legal',
                pioneer: this.stripHTML(cardGR.getValue('pioneer_legality')) == 'Legal',
                predh: this.stripHTML(cardGR.getValue('predh_legality')) == 'Legal',
                premodern: this.stripHTML(cardGR.getValue('premodern_legality')) == 'Legal',
                standard_brawl: this.stripHTML(cardGR.getValue('standardbrawl_legality')) == 'Legal',
                standard: this.stripHTML(cardGR.getValue('standard_legality')) == 'Legal',
                timeless: this.stripHTML(cardGR.getValue('timeless_legality')) == 'Legal',
                vintage: this.stripHTML(cardGR.getValue('vintage_legality')) == 'Legal'
            },
            flags: { // Card flags.
                is_foil: cardGR.getValue('foiling') != 'none',
                is_reserved: cardGR.getValue('reserved_list') == '1',
                is_gc: cardGR.getValue('game_changer') == '1',
                is_token: cardGR.getValue('is_token') == '1',
                is_multifaced: cardGR.getValue('is_multi_faced') == '1',
				// Deck card flags
				is_commander: false,
				is_maybeboard: false,
				is_sideboard: false,
				is_flipped: false
            },
            face_one: { // Face one data.
                artist: cardGR.getValue('face_one_artist'),
                colors: cardGR.getValue('face_one_colors'),
                flavor_name: cardGR.getValue('face_one_flavor_name'),
                flavor_text: cardGR.getValue('face_one_flavor_text'),
                image: this.getImgSrc(cardGR.getValue('front_image')),
                loyalty: cardGR.getValue('face_one_loyalty'),
                mana_cost: cardGR.getValue('face_one_mana_cost'),
                name: cardGR.getValue('face_one_name'),
                oracle_text: cardGR.getValue('face_one_oracle_text'),
                power: cardGR.getValue('face_one_power'),
                toughness: cardGR.getValue('face_one_toughness'),
                type_line: cardGR.getValue('type_line')
            },
            face_two: { // Face two data
                artist: cardGR.getValue('face_two_artist'),
                colors: cardGR.getValue('face_two_colors'),
                flavor_name: cardGR.getValue('face_two_flavor_name'),
                flavor_text: cardGR.getValue('face_two_flavor_text'),
                image: this.getImgSrc(cardGR.getValue('back_image')),
                loyalty: cardGR.getValue('face_two_loyalty'),
                mana_cost: cardGR.getValue('face_two_mana_cost'),
                name: cardGR.getValue('face_two_name'),
                oracle_text: cardGR.getValue('face_two_oracle_text'),
                power: cardGR.getValue('face_two_power'),
                toughness: cardGR.getValue('face_two_toughness'),
                type_line: cardGR.getValue('face_two_type_line')
            },
            counters: { // Counters availble to put on cards.
                generic: 0,
                plusOne: 0,
                minusOne: 0,
                loyalty: cardGR.getValue('face_one_loyalty') || cardGR.getValue('face_two_loyalty') || 0,
                lore: 0,
                time: 0,
                shield: 0,
                charge: 0,
                lifelink: 0,
                haste: 0,
                indestructible: 0,
                flying: 0,
                deathtouch: 0,
                menace: 0,
                trample: 0,
                firstStrike: 0,
                doubleStrike: 0,
                reach: 0,
                vigilance: 0
			},
			price: cardGR.getValue('price'),
			quantity: 0,
			name: cardGR.getValue('name'),
			cmc: cardGR.getValue('cmc')

        };
        return cardData;
    },

    type: 'magic_utils'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-05-31 01:08:27</sys_created_on>
        <sys_id>7b63953c936a0210a066fa497bba10db</sys_id>
        <sys_mod_count>89</sys_mod_count>
        <sys_name>magic_utils</sys_name>
        <sys_package display_value="Magic Collection" source="x_759224_magic_c_0">c09f498f9741a1107720f0571153afe1</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Magic Collection">c09f498f9741a1107720f0571153afe1</sys_scope>
        <sys_update_name>sys_script_include_7b63953c936a0210a066fa497bba10db</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-09-15 01:10:35</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>7b63953c936a0210a066fa497bba10db</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-11-19 00:52:03</sys_created_on>
        <sys_id>7c028bc8c3021210b7cebd73e401319a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-19 00:52:03</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
