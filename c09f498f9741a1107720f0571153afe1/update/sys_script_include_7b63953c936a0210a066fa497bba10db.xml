<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_759224_magic_c_0.magic_utils</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description>Generic Utils for the Magic Collection application.</description>
        <name>magic_utils</name>
        <script><![CDATA[var magic_utils = Class.create();
magic_utils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

    /**
     * Description: Takes in a url to an image and attaches it to the card record
     * Parameters: {string}: url - url to the png from scryfall
     * 			   {string}: table - name of the table that the record you want to attach it to
     * 			   {string}: record - sys_id of the record you want to attach it to
     * 			   {string}: filename - the filename for the attachment
     * Returns: None; A new attachment will be on the card record
     */

    attachImage: function(url, table, record, filename) {
        try {
            var request = new sn_ws.RESTMessageV2();
            request.setHttpMethod('get');
            request.setEndpoint(url);
            request.saveResponseBodyAsAttachment(tablename, recordSysId, filename);
            var response = request.execute();
        } catch (e) {
            gs.info(e.message());
        }
    },

    addSymbology: function(input) {
        var image_name;
        var scope_prefix = 'x_759224_magic_c_0.';
        var html_string;

        var width = '1rem';

        switch (input) {
            // White mana symbol
            case '{W}':
                image_name = 'white_mana.svg';
                break;
                // Blue mana symbol
            case '{U}':
                image_name = 'blue_mana.svg';
                break;
                // Black mana symbol			
            case '{B}':
                image_name = 'black_mana.svg';
                break;
                // Red mana symbol
            case '{R}':
                image_name = 'red_mana.svg';
                break;
                // Green mana symbol
            case '{G}':
                image_name = 'green_mana.svg';
                break;
                // Colorless mana symbol
            case '{C}':
                image_name = 'colorless_mana.svg';
                break;

                // Snow mana symbol
            case '{S}':
                image_name = 'snow_mana.svg';
                break;

                //---- Phyrexian Mana Symbols ---- //
                // Phyrexian White Mana Symbol
            case '{W/P}':
                image_name = 'phyrexian_white_mana.svg';
                break;
                // Phyrexian Blue Mana Symbol
            case '{U/P}':
                image_name = 'phyrexian_blue_mana.svg';
                break;
                // Phyrexian Black Mana Symbol
            case '{B/P}':
                image_name = 'phyrexian_black_mana.svg';
                break;
                // Phyrexian Red Mana Symbol
            case '{R/P}':
                image_name = 'phyrexian_red_mana.svg';
                break;
                // Phyrexian Green Mana Symbol
            case '{G/P}':
                image_name = 'phyrexian_green_mana.svg';
                break;

                //---- Hybrid Phyrexian Mana Symbols ---- //
                // Phyrexian Black Green Hybrid Mana Symbol
            case '{B/G/P}':
                image_name = 'phyrexian_black_green_mana.svg';
                break;
                // Phyrexian Black Red Hybrid Mana Symbol
            case '{B/R/P}':
                image_name = 'phyrexian_black_red_mana.svg';
                break;

                // Phyrexian Green Blue Hybrid Mana Symbol
            case '{G/U/P}':
                image_name = 'phyrexian_green_blue_mana.svg';
                break;

                // Phyrexian Green White Hybrid Mana Symbol
            case '{G/W/P}':
                image_name = 'phyrexian_green_white_mana.svg';
                break;

                // Phyrexian Red Green Hybrid Mana Symbol
            case '{R/G/P}':
                image_name = 'phyrexian_red_green_mana.svg';
                break;

                // Phyrexian Red White Hybrid Mana Symbol
            case '{R/W/P}':
                image_name = 'phyrexian_red_white_mana.svg';
                break;

                // Phyrexian Blue Black Hybrid Mana Symbol
            case '{U/B/P}':
                image_name = 'phyrexian_blue_black_mana.svg';
                break;

                // Phyrexian Blue Red Hybrid Mana Symbol
            case '{U/R/P}':
                image_name = 'phyrexian_blue_red_mana.svg';
                break;

                // Phyrexian White Black Hybrid Mana Symbol
            case '{W/B/P}':
                image_name = 'phyrexian_white_black_mana.svg';
                break;

                // Phyrexian White Blue Hybrid Mana Symbol
            case '{W/U/P}':
                image_name = 'phyrexian_white_blue_mana.svg';
                break;

                //---- Hybrid Mana Base Mana Symbols ----//
                // Hybrid White Blue Mana Symbol
            case '{W/U}':
                image_name = 'white_blue_mana.svg';
                break;
                // Hybrid White Black Mana Symbol
            case '{W/B}':
                image_name = 'white_black_mana.svg';
                break;
                // Hybrid Black Red Mana Symbol
            case '{B/R}':
                image_name = 'black_red_mana.svg';
                break;
                // Hybrid Black Green Mana Symbol
            case '{B/G}':
                image_name = 'black_green_mana.svg';
                break;
                // Hybrid Blue Black Mana Symbol
            case '{U/B}':
                image_name = 'blue_black_mana.svg';
                break;
                // Hybrid Blue Red Mana Symbol
            case '{U/R}':
                image_name = 'blue_red_mana.svg';
                break;
                // Hybrid Red Green Mana Symbol
            case '{R/G}':
                image_name = 'red_green_mana.svg';
                break;
                // Hybrid Red White Mana Symbol
            case '{R/W}':
                image_name = 'red_white_mana.svg';
                break;
                // Hybrid Green White Mana Symbol
            case '{G/W}':
                image_name = 'white_blue_mana.svg';
                break;
                // Hybrid Green Blue Mana Symbol
            case '{G/U}':
                image_name = 'white_blue_mana.svg';
                break;

                //---- Hybrid Colorless Base Mana Symbols ----//
                // Hybrid Colorless White Mana Symbol
            case '{C/W}':
                image_name = 'colorless_white_mana.svg';
                break;

                // Hybrid Colorless Blue Mana Symbol
            case '{C/U}':
                image_name = 'colorless_blue_mana.svg';
                break;

                // Hybrid Colorless Black Mana Symbol
            case '{C/B}':
                image_name = 'colorless_black_mana.svg';
                break;

                // Hybrid Colorless Red Mana Symbol
            case '{C/R}':
                image_name = 'colorless_red_mana.svg';
                break;

                // Hybrid Colorless Green Mana Symbol
            case '{C/G}':
                image_name = 'colorless_green_mana.svg';
                break;

                //---- Hybrid 2 Generic Base Mana Symbols ----//
                // Hybrid 2 Generic White Mana Symbol
            case '{2/W}':
                image_name = 'generic_2_white_mana.svg';
                break;

                // Hybrid 2 Generic Blue Mana Symbol
            case '{2/U}':
                image_name = 'generic_2_blue_mana.svg';
                break;

                // Hybrid 2 Generic Black Mana Symbol
            case '{2/B}':
                image_name = 'generic_2_black_mana.svg';
                break;

                // Hybrid 2 Generic Red Mana Symbol
            case '{2/R}':
                image_name = 'generic_2_red_mana.svg';
                break;

                // Hybrid 2 Generic Green Mana Symbol
            case '{2/G}':
                image_name = 'generic_2_green_mana.svg';
                break;

                //---- Generic Mana Symbols ----//
                // Generic 0 Mana Symbol
            case '{0}':
                image_name = 'generic_0.svg';
                break;

                // Generic ½ Mana Symbol
            case '{½}':
                image_name = 'generic_half.svg';
                break;

                // Generic 1 Mana Symbol
            case '{1}':
                image_name = 'generic_1.svg';
                break;

                // Generic 2 Mana Symbol
            case '{2}':
                image_name = 'generic_2.svg';
                break;

                // Generic 3 Mana Symbol
            case '{3}':
                image_name = 'generic_3.svg';
                break;

                // Generic 4 Mana Symbol
            case '{4}':
                image_name = 'generic_4.svg';
                break;

                // Generic 5 Mana Symbol
            case '{5}':
                image_name = 'generic_5.svg';
                break;

                // Generic 6 Mana Symbol
            case '{6}':
                image_name = 'generic_6.svg';
                break;

                // Generic 7 Mana Symbol
            case '{7}':
                image_name = 'generic_7.svg';
                break;

                // Generic 8 Mana Symbol
            case '{8}':
                image_name = 'generic_8.svg';
                break;

                // Generic 9 Mana Symbol
            case '{9}':
                image_name = 'generic_9.svg';
                break;

                // Generic 10 Mana Symbol
            case '{10}':
                image_name = 'generic_10.svg';
                break;

                // Generic 11 Mana Symbol
            case '{11}':
                image_name = 'generic_11.svg';
                break;

                // Generic 12 Mana Symbol
            case '{12}':
                image_name = 'generic_12.svg';
                break;

                // Generic 13 Mana Symbol
            case '{13}':
                image_name = 'generic_13.svg';
                break;

                // Generic 14 Mana Symbol
            case '{14}':
                image_name = 'generic_14.svg';
                break;

                // Generic 15 Mana Symbol
            case '{15}':
                image_name = 'generic_15.svg';
                break;

                // Generic 16 Mana Symbol
            case '{16}':
                image_name = 'generic_16.svg';
                break;

                // Generic 17 Mana Symbol
            case '{17}':
                image_name = 'generic_17.svg';
                break;

                // Generic 18 Mana Symbol
            case '{18}':
                image_name = 'generic_18.svg';
                break;

                // Generic 19 Mana Symbol
            case '{19}':
                image_name = 'generic_19.svg';
                break;

                // Generic 20 Mana Symbol
            case '{20}':
                image_name = 'generic_20.svg';
                break;

                // Generic 100 Mana Symbol
            case '{100}':
                image_name = 'generic_100.svg';
                width = '2rem';
                break;

                // Generic 1000000 Mana Symbol
            case '{1000000}':
                image_name = 'generic_1000000.svg';
                width = '5rem';
                break;

                // Generic ∞ Mana Symbol
            case '{∞}':
                image_name = 'generic_infinity.svg';
                break;

                // Generic X Mana Symbol
            case '{X}':
                image_name = 'generic_x.svg';
                break;

                // Generic Y Mana Symbol
            case '{Y}':
                image_name = 'generic_y.svg';
                break;

                // Generic Z Mana Symbol
            case '{Z}':
                image_name = 'generic_z.svg';
                break;

                //---- Misc Mana Symbols ----//
                // Half White Mana Symbol
            case '{HW}':
                image_name = 'half_white_mana.svg';
                break;
                // Half Red Mana Symbol
            case '{HR}':
                image_name = 'half_red_mana.svg';
                break;

                //---- Counters Symbols ----//
                // Energy Counter Symbol
            case '{E}':
                image_name = 'energy_counter.svg';
                break;

                // Acorn Counter Symbol
            case '{A}':
                image_name = 'acorn_counter.svg';
                break;

                // Ticket Counter Symbol
            case '{TK}':
                image_name = 'ticket_counter.svg';
                break;

                //---- Card Action Symbols ----//
                // Tap Symbol
            case '{T}':
                image_name = 'tap.svg';
                break;

                // Untap Symbol
            case '{Q}':
                image_name = 'untap.svg';
                break;

				//---- Misc Symbols ----//
			// Planeswalker Symbol
			case '{PW}':
				image_name = 'planeswalker.svg';
				break;

			// Chaos Symbol
			case '{CHAOS}':
				image_name = 'chaos.svg';
				break;
			
			// Phyrexian Symbol
			case '{P}':
				image_name = 'phyrexian.svg';
				break;
        }

        return html_string = '<img style="width:' + width + ';" src="' + scope_prefix + image_name + '" />';
    },

    /**
    * Description: Takes in a CSV file and creates each card and associates it to a deck record.   
    * Parameters: {string}: Data - CSV formatted file;
    			  {string}: Name - the name of the deck;
    			  {string}: Commander(s) - the name / names of the commanders for the deck;
    * Returns: None; Creates a deck record and associates each card from the import with the deck. The card will be 
    				 created if it doesn't exist presently.
    */

    importDeck: function(data, name, commander) {
        data = data || this.getParameter('data');
        // Converts data into an array.
        var deck_arr = this._cleanData(data);
        var cards = this._processArr(deck_arr);
        this._createDeck(cards, name, commander);

    },

    /**
     * Description: Takes in information pertaining to a card and creates a card record from it.
     * Parameters: {string}: Card - comma seperated string containing information for the card;
     * Returns: None; Creates a new card record.
     */

    _cleanData: function(data) {
        // Performs several replace operations to allow use to process the data in a meaningful way.
        var result = data.replaceAll(/\n/g, '|').replace(/'/g, "\\'").replace(/,(?=(?:[^"]*"[^"]*")*[^"]*$)/g, ';').replaceAll('"', '').replaceAll(/\\/g, '').replaceAll('\r', '');
        // Convert the string into an array, and return
        return result.split('|');
    },

    /**
     * Description: Takes in a CSV file and cleans the data so it can be proccessed
     * Parameters: {string}: Data - CSV formatted file.
     * Returns: {array of objects}: Cards - an array of objects containing all the card names and quantities.
     */

    _processArr: function(arr) {
        var i = 0;
        var cards = [];

        while (i < arr.length) {
            var card = arr[i].split(';');
            //this._createCard(card);
            cards = this._trackNames(card, cards);
            i++;
        }
        // Return the cards
        return cards;
    },
    /**
     * Description: Takes in a CSV file and cleans the data so it can be proccessed
     * Parameters: {string}: Data - CSV formatted file;
     * Returns: None; Creates a new card record.
     */

    _createCard: function(card) {
        // Set attributes from card
        var quantity = card[0];
        var name = card[1];
        var set_id = card[2];
        var foil = card[3];
        var cn = card[4];
        // Create GlideRecord
        var cardGr = new GlideRecord('x_759224_magic_c_0_mtg_cards');
        cardGr.initialize();
        // Populate values
        cardGr.setValue('quantity', quantity);
        cardGr.setValue('name', name);
        cardGr.setValue('collector_number', cn);
        cardGr.setValue('sets', this._getSetRecord(set_id));
        // Set Foiling
        if (foil == 'Normal') {
            cardGr.setValue('foiling', 'none');
        } else if (foil == 'Foil') {
            cardGr.setValue('foiling', 'foil');
        } else {
            cardGr.setValue('foiling', 'etched');
        }
        cardGr.insert();
    },

    /**
     * Description: Takes in set_id and returns the sys_id of the record on the system
     * Parameters: {string}: set_id - the string id used to identify a set;
     * Returns: {string}: sys_id of the set record from the system.
     */

    _getSetRecord: function(set_id) {
        var setGr = new GlideRecord('x_759224_magic_c_0_mtg_sets');
        setGr.addQuery('id', set_id);
        setGr.query();
        setGr.next();
        return setGr.getUniqueValue();
    },

    _trackNames: function(card, arr) {
        var obj = {
            "name": card[1],
            "quantity": card[0],
            "cn": card[4]
        };
        arr.push(obj);
        return arr;
    },

    _createDeck: function(arr, name, commander) {
        var deckGr = new GlideRecord('x_759224_magic_c_0_decks');
        deckGr.initialize();
        deckGr.setValue('name', name);
        deckGr.setValue('commanders', this._getCommanders(commander, '303'));
        deckGr.setValue('cards', this._getCards(arr, commander));
        // Set Basics Land fields
        var basics = this._getBasics(arr);
        var colors = [];
        if (basics.plains != null) {
            deckGr.setValue('plains', basics.plains);
            colors.push('W');
        }
        if (basics.island != null) {
            deckGr.setValue('island', basics.island);
            colors.push('U');
        }
        if (basics.swamp != null) {
            deckGr.setValue('swamp', basics.swamp);
            colors.push('B');
        }
        if (basics.mountain != null) {
            deckGr.setValue('mountain', basics.mountain);
            colors.push('R');
        }
        if (basics.forest != null) {
            deckGr.setValue('forest', basics.forest);
            colors.push('G');
        }
        if (basics.wastes != null) {
            deckGr.setValue('wastes', basics.wastes);
            colors.push('C');
        }
        deckGr.setValue('color_identity', colors.join());
        deckGr.insert();
    },

    _getCommanders: function(name, cn) {
        return this._getCardRecord(name, cn);
    },

    _getBasics: function(arr) {
        var basics = {};
        var count = 0;
        while (count < arr.length) {
            switch (arr[count].name) {
                case 'Plains':
                    basics.plains = arr[count].quantity;
                    break;
                case 'Island':
                    basics.island = arr[count].quantity;
                    break;
                case 'Mountain':
                    basics.mountain = arr[count].quantity;
                    break;
                case 'Swamp':
                    basics.swamp = arr[count].quantity;
                    break;
                case 'Forest':
                    basics.forest = arr[count].quantity;
                    break;
                case 'Wastes':
                    basics.wastes += arr[count].quantity;
                    break;
            }
            count++;
        }
        return basics;
    },

    _getCards: function(cardsArr, commander) {
        var count = 0;
        var cards = [];
        while (count < cardsArr.length) {
            // Remove Commander and Basics from the list of cards so they're not counted several times
            if (cardsArr[count].name == 'Plains' ||
                cardsArr[count].name == 'Island' ||
                cardsArr[count].name == 'Swamp' ||
                cardsArr[count].name == 'Mountain' ||
                cardsArr[count].name == 'Forest' ||
                cardsArr[count].name == 'Wastes' ||
                cardsArr[count].name == commander) {
                gs.info(cardsArr[count].name);
            } else {
                var card = this._getCardRecord(cardsArr[count].name, cardsArr[count].cn);
                cards.push(card);
            }
            count++;
        }
        return cards.join();
    },

    _getCardRecord: function(name, cn) {
        var cardGr = new GlideRecord('x_759224_magic_c_0_mtg_cards');
        cardGr.addQuery('name', name);
        if (cn) {
            cardGr.addQuery('collector_number', cn);
        }
        cardGr.query();
        if (cardGr.hasNext()) {
            cardGr.next();
            return cardGr.getUniqueValue();
        }
    },

    type: 'magic_utils'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-05-31 01:08:27</sys_created_on>
        <sys_id>7b63953c936a0210a066fa497bba10db</sys_id>
        <sys_mod_count>60</sys_mod_count>
        <sys_name>magic_utils</sys_name>
        <sys_package display_value="Magic Collection" source="x_759224_magic_c_0">c09f498f9741a1107720f0571153afe1</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Magic Collection">c09f498f9741a1107720f0571153afe1</sys_scope>
        <sys_update_name>sys_script_include_7b63953c936a0210a066fa497bba10db</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-06-08 19:16:52</sys_updated_on>
    </sys_script_include>
</record_update>
