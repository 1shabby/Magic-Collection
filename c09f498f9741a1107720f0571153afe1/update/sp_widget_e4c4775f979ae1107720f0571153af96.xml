<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function(spModal, $rootScope, $sce, $scope, mtgCards) {
    var c = this;
    c.currentPage = c.data.currentPage || 1;
    c.pageInput = c.currentPage;
    c.searchTerm = c.data.searchTerm || '';

    // Listen for searchTerm broadcasts
    $scope.$on('searchTerm', function(event, term) {
        c.searchTerm = term || '';
        c.currentPage = 1;
        c.pageInput = 1;
        c.updatePage(1);
    });

    $scope.openCardModal = function(card, event) {
        mtgCards.setCard(card);
        if (event) event.stopPropagation();
    };

    c.pageCount = function() {
        return Math.ceil(c.data.totalCount / c.data.pageSize);
    };

    c.middlePages = function() {
        var pages = [];
        var start = Math.max(2, c.currentPage - 2);
        var end = Math.min(c.pageCount() - 1, c.currentPage + 2);
        for (var i = start; i <= end; i++) pages.push(i);
        return pages;
    };

    c.updatePage = function(page) {
        c.currentPage = page;
        c.pageInput = page;

        c.server.get({
            page: page,
            searchTerm: c.searchTerm.trim()
        }).then(function(response) {
            c.data.records = response.data.records;
            c.data.totalCount = response.data.totalCount;
            c.data.pageSize = response.data.pageSize;
            c.currentPage = response.data.currentPage;
            c.pageInput = response.data.currentPage;
        });
    };

    // Pagination helpers
    c.prevPage = function() {
        if (c.currentPage > 1) c.updatePage(c.currentPage - 1);
    };

    c.nextPage = function() {
        if (c.currentPage < c.pageCount()) c.updatePage(c.currentPage + 1);
    };

    c.setPage = function(page) {
        c.updatePage(page);
    };

    c.handlePageInput = function(event) {
        if (event.key === 'Enter') {
            c.jumpToPage();
        }
    };

    c.jumpToPage = function() {
        var page = parseInt(c.pageInput, 10);
        if (!isNaN(page) && page >= 1 && page <= c.pageCount()) {
            c.updatePage(page);
        }
    };

    // Initial fetch
    c.updatePage(c.currentPage);
};]]></client_script>
        <controller_as>c</controller_as>
        <css>body {&#13;
  min-height: 100vh;&#13;
  display: flex;&#13;
  flex-direction: column;&#13;
}&#13;
&#13;
.wrapper {&#13;
  display: grid;&#13;
  justify-items: center;&#13;
  padding: 1rem;&#13;
  gap: 2.5rem;&#13;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));&#13;
}&#13;
&#13;
@media (max-width: 768px) {&#13;
  .wrapper {&#13;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));&#13;
  }&#13;
}&#13;
&#13;
@media (max-width: 480px) {&#13;
  .wrapper {&#13;
    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));&#13;
  }&#13;
}&#13;
&#13;
.card {&#13;
  display: flex;&#13;
  flex-direction: column;&#13;
  position: relative;&#13;
  border-radius: 5%;&#13;
  background-color: black;&#13;
  max-width: 350px;&#13;
  width: 100%;&#13;
  height: fit-content;&#13;
  padding:0px;&#13;
  border:0px;&#13;
}&#13;
&#13;
.image-container {&#13;
  position: relative;&#13;
  overflow: hidden;&#13;
  width: 100%;         &#13;
  max-width: 350px;    &#13;
  height: auto;&#13;
}&#13;
&#13;
.image {&#13;
  width: 100%;     &#13;
  height: auto;    &#13;
  display: block;&#13;
  border-radius: 5%;&#13;
}&#13;
&#13;
.foil {&#13;
  position: absolute;&#13;
  top: 0;&#13;
  right: 0;  &#13;
  border-radius: 5%;&#13;
  width: 100%;  &#13;
  height: 100%;&#13;
  object-fit: cover;&#13;
  transition: transform 0.2s ease;&#13;
}&#13;
&#13;
.card:hover {&#13;
  transform: scale(1.1);&#13;
}&#13;
&#13;
img {&#13;
  width: 100%;&#13;
  display: block;&#13;
}&#13;
&#13;
.pagination {&#13;
  display: flex;&#13;
  flex-direction: column;&#13;
  align-items: center;&#13;
  justify-content: center;&#13;
  gap: 0.75rem;&#13;
  margin-top: 2rem;&#13;
}&#13;
&#13;
.pagination button {&#13;
  padding: 6px 10px;&#13;
  min-width: 36px;&#13;
  background-color: $brand-secondary;&#13;
  border: 1px solid #ccc;&#13;
  border-radius: 4px;&#13;
  color: #333;&#13;
  font-size: 14px;&#13;
  cursor: pointer;&#13;
  transition: background-color 0.2s ease, transform 0.1s ease;&#13;
}&#13;
&#13;
.pagination button:hover:not(:disabled) {&#13;
  background-color: #ddd;&#13;
  transform: translateY(-1px);&#13;
}&#13;
&#13;
.pagination button:disabled {&#13;
  opacity: 0.5;&#13;
  cursor: default;&#13;
}&#13;
&#13;
.pagination button.active-page {&#13;
  background-color: #007acc;&#13;
  color: white;&#13;
  font-weight: bold;&#13;
  border-color: #007acc;&#13;
}&#13;
&#13;
.go-to-page {&#13;
  margin-left: 1rem;&#13;
  display: inline-flex;&#13;
  align-items: center;&#13;
  gap: 0.5rem;&#13;
}&#13;
&#13;
.go-to-page input[type="number"] {&#13;
  width: 60px;&#13;
  padding: 4px 6px;&#13;
  border-radius: 4px;&#13;
  border: 1px solid #ccc;&#13;
}&#13;
&#13;
.go-to-page button {&#13;
  padding: 4px 10px;&#13;
  border-radius: 4px;&#13;
  border: 1px solid #555;&#13;
  background-color: $brand-secondary;&#13;
  cursor: pointer;&#13;
  color: white;&#13;
}&#13;
&#13;
.go-to-page label {&#13;
  color: white !important;&#13;
}&#13;
&#13;
.go-to-page button:hover {&#13;
  background-color: #444;&#13;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description>A widget used to display an MTG card via the provided data on the card.</description>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>mtg_card</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>MTG Card</name>
        <option_schema>[{"name":"page_limit","section":"other","default_value":"24","label":"Cards Per Page","type":"integer"},{"name":"page","section":"other","default_value":"1","label":"Page","type":"integer"}]</option_schema>
        <public>true</public>
        <roles>x_759224_magic_c_0.admin</roles>
        <script><![CDATA[(function() {
    data.records = [];

    //Detect first load vs. pagination
    var page = (input && input.page) ? parseInt(input.page, 10) : 1;
    var pageSize = parseInt(options.page_limit || 18, 10);
    var offset = (page - 1) * pageSize;
    var searchTerm = (input && input.searchTerm) ? input.searchTerm.trim() : '';

    var utils = new x_759224_magic_c_0.magic_utils();

    //Count total cards
    var countGR = new GlideRecord('x_759224_magic_c_0_mtg_cards');
    if (searchTerm){
	countGR.addQuery('name', 'CONTAINS', searchTerm);
	}
	countGR.addEncodedQuery('is_token=false');
    countGR.query();
    data.totalCount = countGR.getRowCount();

    //Fetch paginated records
    var cardsGR = new GlideRecord('x_759224_magic_c_0_mtg_cards');
    if (searchTerm) {
		cardsGR.addQuery('name', 'CONTAINS', searchTerm);
	}
    cardsGR.orderBy('name');
	countGR.addEncodedQuery('is_token=false');
    cardsGR.query();

    var i = 0, added = 0;
    while (cardsGR.next()) {
        if (i >= offset && added < pageSize) {
			data.records.push(utils.getCardData(cardsGR.getUniqueValue()));
			gs.debug(cardsGR.getUniqueValue());
            added++;
        }
        i++;
        if (added >= pageSize) break;
    }

    //Final response
    data.records = data.records || [];
    data.totalCount = data.totalCount || 0;
    data.pageSize = pageSize;
    data.currentPage = page;
    data.searchTerm = searchTerm;
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>greg</sys_created_by>
        <sys_created_on>2023-04-25 04:37:10</sys_created_on>
        <sys_id>e4c4775f979ae1107720f0571153af96</sys_id>
        <sys_mod_count>432</sys_mod_count>
        <sys_name>MTG Card</sys_name>
        <sys_package display_value="Magic Collection" source="x_759224_magic_c_0">c09f498f9741a1107720f0571153afe1</sys_package>
        <sys_policy/>
        <sys_scope display_value="Magic Collection">c09f498f9741a1107720f0571153afe1</sys_scope>
        <sys_update_name>sp_widget_e4c4775f979ae1107720f0571153af96</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-09-24 17:24:29</sys_updated_on>
        <template><![CDATA[<div class="wrapper">
  <button class="card"
          ng-repeat="card in data.records"
          ng-click="openCardModal(card, $event)">
    <div class="image-container">
      <img class="image" ng-src="{{card.face_one.image}}" ng-alt="{{card.face_one.oracle_text}}" />
      <img class="foil" ng-if="card.flags.is_foil" src="x_759224_magic_c_0.foil.png"/>
    </div>
  </button>
</div>

<!-- Fallback if no cards -->
<div ng-if="c.pageCount() === 0" class="no-cards-message">
  No cards found.
</div>

<!-- Pagination Controls -->
<div class="pagination" ng-if="c.pageCount() > 1">
  <!-- Main Pagination Buttons -->
  <div class="pagination-buttons">
    <button ng-click="c.prevPage()" ng-disabled="c.currentPage === 1">‹</button>
    <button ng-click="c.setPage(1)" ng-class="{'active-page': c.currentPage === 1}">1</button>
    <span ng-if="c.currentPage > 4">…</span>
    
    <span ng-repeat="n in c.middlePages() track by $index">
      <button ng-click="c.setPage(n)" ng-class="{'active-page': c.currentPage === n}">
        {{n}}
      </button>
    </span>
    
    <span ng-if="c.currentPage < c.pageCount() - 3">…</span>
    <button ng-if="c.pageCount() > 1"
            ng-click="c.setPage(c.pageCount())"
            ng-class="{'active-page': c.currentPage === c.pageCount()}">
      {{c.pageCount()}}
    </button>
    <button ng-click="c.nextPage()" ng-disabled="c.currentPage === c.pageCount()">›</button>
  </div>
  <div class="go-to-page">
    <label for="pageInput">Go to page:</label>
    <input id="pageInput"
           type="number"
           ng-model="c.pageInput"
           min="1"
           max="{{c.pageCount()}}"
           ng-keypress="c.handlePageInput($event)" />
    <button ng-click="c.jumpToPage()">Go</button>
  </div>
</div>]]></template>
    </sp_widget>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>e4c4775f979ae1107720f0571153af96</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-11-19 01:01:19</sys_created_on>
        <sys_id>a0240b8cc3021210b7cebd73e4013159</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-19 01:01:19</sys_updated_on>
        <table>sp_widget</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
