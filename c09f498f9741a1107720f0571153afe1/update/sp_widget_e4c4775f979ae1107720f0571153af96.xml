<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function(spModal, $rootScope, $sce, $scope) {
    var c = this;
    c.currentPage = c.data.currentPage || 1;
    c.pageInput = c.currentPage;
    c.searchTerm = c.data.searchTerm || '';

    // Listen for searchTerm broadcasts
    $scope.$on('searchTerm', function(event, term) {
        c.searchTerm = term || '';
        c.currentPage = 1;
        c.pageInput = 1;
        c.updatePage(1);
    });

    c.pageCount = function() {
        return Math.ceil(c.data.totalCount / c.data.pageSize);
    };

    c.middlePages = function() {
        var pages = [];
        var start = Math.max(2, c.currentPage - 2);
        var end = Math.min(c.pageCount() - 1, c.currentPage + 2);
        for (var i = start; i <= end; i++) pages.push(i);
        return pages;
    };

    c.updatePage = function(page) {
        c.currentPage = page;
        c.pageInput = page;

        c.server.get({
            page: page,
            searchTerm: c.searchTerm.trim()
        }).then(function(response) {
            c.data.records = response.data.records;
            c.data.totalCount = response.data.totalCount;
            c.data.pageSize = response.data.pageSize;
            c.currentPage = response.data.currentPage;
            c.pageInput = response.data.currentPage;
        });
    };

    // Pagination helpers
    c.prevPage = function() {
        if (c.currentPage > 1) c.updatePage(c.currentPage - 1);
    };

    c.nextPage = function() {
        if (c.currentPage < c.pageCount()) c.updatePage(c.currentPage + 1);
    };

    c.setPage = function(page) {
        c.updatePage(page);
    };

    c.handlePageInput = function(event) {
        if (event.key === 'Enter') {
            c.jumpToPage();
        }
    };

    c.jumpToPage = function() {
        var page = parseInt(c.pageInput, 10);
        if (!isNaN(page) && page >= 1 && page <= c.pageCount()) {
            c.updatePage(page);
        }
    };

    // Initial fetch
    c.updatePage(c.currentPage);

    c.viewDetails = function(card) {
        var isFoil = card.foil && card.foil.toLowerCase() !== 'none';
        var isGenericBack = card.bImg === 'https://backs.scryfall.io/normal/2/2/222b7a3b-2321-4d4c-af19-19338b134971.jpg?1677416389';

        var legalityFormats = [
            'standard', 'standardBrawl', 'historic', 'alchemy', 'pioneer', 'explorer',
            'modern', 'legacy', 'vintage', 'pauper', 'paupercommander', 'commander',
            'brawl', 'oathbreaker', 'gladiator', 'future', 'oldschool', 'preDH',
            'premodern', 'timeless'
        ];

        var legalYes = [];
        var legalNo = [];
        legalityFormats.forEach(function(format) {
            if (card[format]) {
                if (card[format].toLowerCase().includes('legal')) {
                    legalYes.push(format.charAt(0).toUpperCase() + format.slice(1));
                } else {
                    legalNo.push(format.charAt(0).toUpperCase() + format.slice(1));
                }
            }
        });

        var legalitiesHtml =
            "<div style='margin-top: 6px;'>" +
            "<strong>Legal Formats:</strong><br>" +
            (legalYes.length ? legalYes.join(', ') : 'None') +
            "</div>" +
            "<div style='margin-top: 6px;'>" +
            "<strong>Not Legal Formats:</strong><br>" +
            (legalNo.length ? legalNo.join(', ') : 'None') +
            "</div>";

        // Helper to convert color codes to full names and filter empties
        function colorsToNames(colors) {
            if (!colors) return "";
            var map = {
                B: 'Black',
                W: 'White',
                U: 'Blue',
                R: 'Red',
                G: 'Green',
                C: 'Colorless'
            };
            return colors
                .split('')
                .map(c => map[c.toUpperCase()] || '')
                .filter(c => c && c.trim() !== '')
                .join(', ');
        }

        function hasValue(val) {
            return val !== undefined && val !== null && val.toString().trim() !== '';
        }

        var frontColorsFull = colorsToNames(card.frontColors);
        var backColorsFull = colorsToNames(card.backColors);

        var showPTFront = hasValue(card.frontPower) || hasValue(card.frontToughness);
        var showPTBack = hasValue(card.backPower) || hasValue(card.backToughness);

        var showFlavorFront = hasValue(card.frontFlavor) && card.frontFlavor.trim() !== '-';
        var showFlavorBack = hasValue(card.backFlavor) && card.backFlavor.trim() !== '-';

        var showManaFront = hasValue(card.frontManaCost);
        var showManaBack = hasValue(card.backManaCost);

        var message =
            "<style>" +
            ".card-modal-content { display: flex; flex-wrap: wrap; gap: 20px; max-width: 1100px; margin: auto; color: #eee; background: #1e1e1e; }" +
            ".flip-card-wrapper { flex-grow: 1; max-width: 100%; width: 100%; perspective: 1000px; margin: 0 auto; }" +
            ".flip-card { width: 100%; position: relative; }" +
            ".flip-card-inner { position: relative; width: 100%; padding-top: 135%; transition: transform 0.8s; transform-style: preserve-3d; }" +
            ".flip-card.flipped .flip-card-inner { transform: rotateY(180deg); }" +
            ".flip-card-front, .flip-card-back { position: absolute; top: 0; left: 0; width: 100%; height: 100%; border-radius: 4%; backface-visibility: hidden; display: flex; align-items: center; justify-content: center; background: #000; }" +
            ".flip-card-back { transform: rotateY(180deg); }" +
            ".flip-card-front img, .flip-card-back img { width: 100%; height: 100%;border-radius: 4%; display: block; }" +
            ".card-img-container { position: relative; width: 100%; height: 100%; }" +
            ".foil-overlay { position: absolute; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; border-radius: 4%; z-index: 2; display: block; }" +
            ".icon-links img { width: 32px; height: 32px; margin: 4px; cursor: pointer; }" +
            ".info-col { font-size: 1.2rem; line-height: 1.6; font-weight: 600; color: #eee; }" +
            ".info-col strong {font-weight: 700;font-size: 1.35rem;}" +
            "#cardName { font-weight: 900; font-size: 1.8rem; margin-bottom: 12px; color: #fff; }" +
            "@media (max-width: 768px) { .card-modal-content { flex-direction: column !important; align-items: center; } .flip-card-wrapper { max-width: 90%; min-width: 300px; } }" +
            "</style>" +

            "<div class='card-modal-content'>" +

            // Left Column - Card image & buttons
            "<div style='flex: 1.3; text-align: center; display: flex; flex-direction: column; align-items: center;'>" +
            "<div class='flip-card-wrapper'>" +
            "<div class='flip-card' id='flipCard'>" +
            "<div class='flip-card-inner'>" +

            // Front
            "<div class='flip-card-front'>" +
            "<div class='card-img-container'>" +
            "<img src='" + card.fImg + "' alt='Card Front' />" +
            (isFoil ? "<img class='foil-overlay' src='x_759224_magic_c_0.foil.png' alt='Foil Overlay' />" : "") +
            "</div>" +
            "</div>" +

            // Back
            (card.bImg ?
                "<div class='flip-card-back'>" +
                "<div class='card-img-container'>" +
                "<img src='" + card.bImg + "' alt='Card Back' />" +
                ((isFoil && !isGenericBack) ? "<img class='foil-overlay' src='x_759224_magic_c_0.foil.png' alt='Foil Overlay' />" : "") +
                "</div>" +
                "</div>" : "") +

            "</div></div></div>" +

            (!isGenericBack && card.bImg ?
                "<button id='flipBtn' style='margin-top: 10px; padding: 6px 10px; background: #007acc; color: #fff; border: none; border-radius: 5px; cursor: pointer;'>Flip Card</button>" : "") +

            "<div style='margin-top: 10px;'><strong>Price:</strong><br> $" + (hasValue(card.price) ? card.price : 'N/A') + "</div>" +

            "<div class='icon-links' style='display: flex; justify-content: center; flex-wrap: wrap; margin-top: 8px;'>" +
            // Seller Icons
            (card.tcg ? "<a href='" + card.tcg + "' target='_blank'><img src='x_759224_magic_c_0.icon_tcgplayer.png' title='TCGPlayer' alt='TCGPlayer'/></a>" : "") +
            (card.cardMarket ? "<a href='" + card.cardMarket + "' target='_blank'><img src='x_759224_magic_c_0.icon_cardmarket.png' title='Cardmarket' alt='Cardmarket'/></a>" : "") +
            (card.cardHoarder ? "<a href='" + card.cardHoarder + "' target='_blank'><img src='x_759224_magic_c_0.icon_cardhoarder.png' title='Cardhoarder' alt='Cardhoarder'/></a>" : "") +
            (card.edhrec ? "<a href='" + card.edhrec + "' target='_blank'><img src='x_759224_magic_c_0.icon_edhrec.png' title='EDHREC' alt='EDHREC'/></a>" : "") +
            "</div>" +
            "</div>" +

            // Right Column- Text info
            "<div class='info-col' style='flex: 1.5;'>" +
            "<div id='cardName'>" + (hasValue(card.name) ? card.name : 'Unknown Card') + "</div>" +

            // Mana Cost and Type Line rows, shown only if present
            ((showManaFront || hasValue(card.typeLine)) ?
                "<div style='display: flex; gap: 20px; margin-bottom: 8px;'>" +
                (showManaFront ? "<div><strong>Mana Cost:</strong><br> <span id='manaCost'>" + card.frontManaCost + "</span></div>" : "") +
                (hasValue(card.typeLine) ? "<div><strong>Type:</strong><br> <span id='typeLine'>" + card.typeLine + "</span></div>" : "") +
                "</div>" : "") +

            // Colors and Power/Toughness row, only if values present
            ((hasValue(frontColorsFull) || showPTFront) ?
                "<div style='display: flex; gap: 20px; margin-bottom: 8px;'>" +
                (hasValue(frontColorsFull) ? "<div><strong>Colors:</strong><br> <span id='colors'>" + frontColorsFull + "</span></div>" : "") +
                (showPTFront ? "<div><strong>Power/Toughness:</strong><br> <span id='pt'>" + (hasValue(card.frontPower) ? card.frontPower : "–") + " / " + (hasValue(card.frontToughness) ? card.frontToughness : "–") + "</span></div>" : "") +
                "</div>" : "") +

            // Oracle Text, only if present
            (hasValue(card.frontOracle) ? "<div style='margin-bottom: 10px;'><strong>Oracle Text:</strong><br><span id='oracle'>" + card.frontOracle + "</span></div>" : "") +

            // Flavor Text if available
            (showFlavorFront ? "<div style='font-style: italic; margin-bottom: 12px;'><strong>Flavor Text:</strong><br><em id='flavor'>" + card.frontFlavor + "</em></div>" : "") +

            // Set info if present
            (hasValue(card.sets) ? "<div style='margin-bottom: 8px;'><strong>Set:</strong><br> " + card.sets + "</div>" : "") +

            // Collector Number and Artist side by side
            ((hasValue(card.collectorNumber) || hasValue(card.frontArtist)) ?
                "<div style='display: flex; gap: 20px; margin-bottom: 12px;'>" +
                (hasValue(card.collectorNumber) ? "<div><strong>Number:</strong><br><em id='cn'>" + card.collectorNumber + "</em></div>" : "") +
                (hasValue(card.frontArtist) ? "<div><strong>Artist:</strong><br><em id='artist'>" + card.frontArtist + "</em></div>" : "") +
                "</div>" : "") +

            // Legalities with a separator
            "<hr style='border: none; border-top: 1px solid #555; margin: 20px 0;'>" +
            "<div class='info-col' style='flex: 1;'>" +
            legalitiesHtml +
            "</div>" +

            "</div>" +

            // Flip functionality script
            "<script>" +
            "setTimeout(function() {" +
            "  var flipBtn = document.getElementById('flipBtn');" +
            "  var flipCard = document.getElementById('flipCard');" +
            "  if (flipBtn && flipCard) {" +
            "    flipBtn.addEventListener('click', function() {" +
            "      flipCard.classList.toggle('flipped');" +
            "      var isFlipped = flipCard.classList.contains('flipped');" +

            // Mana cost toggle, only if present
            "      var manaCostEl = document.getElementById('manaCost');" +
            "      if(manaCostEl) {" +
            "        manaCostEl.innerHTML = isFlipped ? `" + (hasValue(card.backManaCost) ? card.backManaCost : "") + "` : `" + (hasValue(card.frontManaCost) ? card.frontManaCost : "") + "`;" +
            "        if(!manaCostEl.innerHTML.trim()) manaCostEl.parentElement.style.display = 'none'; else manaCostEl.parentElement.style.display = 'inline';" +
            "      }" +

            // Colors toggle
            "      var colorsEl = document.getElementById('colors');" +
            "      if(colorsEl) {" +
            "        colorsEl.innerText = isFlipped ? `" + backColorsFull + "` : `" + frontColorsFull + "`;" +
            "        if(!colorsEl.innerText.trim()) colorsEl.parentElement.style.display = 'none'; else colorsEl.parentElement.style.display = 'inline';" +
            "      }" +

            // Type line toggle
            "      var typeLineEl = document.getElementById('typeLine');" +
            "      if(typeLineEl) {" +
            "        typeLineEl.innerText = isFlipped ? `" + (card.backTypeLine || "") + "` : `" + (card.typeLine || "") + "`;" +
            "        if(!typeLineEl.innerText.trim()) typeLineEl.parentElement.style.display = 'inline'; else typeLineEl.parentElement.style.display = 'inline';" +
            "      }" +

            // Oracle text toggle
            "      var oracleEl = document.getElementById('oracle');" +
            "      if(oracleEl) {" +
            "        oracleEl.innerHTML = isFlipped ? `" + (card.backOracle || "") + "` : `" + (card.frontOracle || "") + "`;" +
            "        if(!oracleEl.innerHTML.trim()) oracleEl.parentElement.style.display = 'none'; else oracleEl.parentElement.style.display = 'block';" +
            "      }" +

            // Flavor text toggle
            "      var flavorEl = document.getElementById('flavor');" +
            "      if (flavorEl) {" +
            "        var backFlavor = `" + (card.backFlavor || "") + "`;" +
            "        var frontFlavor = `" + (card.frontFlavor || "") + "`;" +
            "        if (isFlipped && backFlavor.trim() && backFlavor.trim() !== '-') {" +
            "          flavorEl.innerText = backFlavor;" +
            "          flavorEl.parentElement.style.display = 'block';" +
            "        } else if (!isFlipped && frontFlavor.trim() && frontFlavor.trim() !== '-') {" +
            "          flavorEl.innerText = frontFlavor;" +
            "          flavorEl.parentElement.style.display = 'block';" +
            "        } else {" +
            "          flavorEl.parentElement.style.display = 'none';" +
            "        }" +
            "      }" +

            // Power/Toughness toggle
            "      var ptEl = document.getElementById('pt');" +
            "      if (ptEl) {" +
            "        var backPower = `" + (hasValue(card.backPower) ? card.backPower : "") + "`;" +
            "        var backToughness = `" + (hasValue(card.backToughness) ? card.backToughness : "") + "`;" +
            "        var frontPower = `" + (hasValue(card.frontPower) ? card.frontPower : "") + "`;" +
            "        var frontToughness = `" + (hasValue(card.frontToughness) ? card.frontToughness : "") + "`;" +
            "        if (isFlipped && backPower.trim() && backToughness.trim()) {" +
            "          ptEl.innerText = backPower + ' / ' + backToughness;" +
            "          ptEl.parentElement.style.display = 'inline';" +
            "        } else if (!isFlipped && frontPower.trim() && frontToughness.trim()) {" +
            "          ptEl.innerText = frontPower + ' / ' + frontToughness;" +
            "          ptEl.parentElement.style.display = 'inline';" +
            "        } else {" +
            "          ptEl.parentElement.style.display = 'none';" +
            "        }" +
            "      }" +
            "    });" +
            "  }" +
            "}, 100);" +
            "</script>";

        c.trustedMessage = $sce.trustAsHtml(message);

        spModal.open({
            title: card.name || 'Card Details',
            message: c.trustedMessage,
            size: 'custom',
            buttons: [{
                label: '${Close}',
                primary: true
            }]
        });
    };
};]]></client_script>
        <controller_as>c</controller_as>
        <css>body {&#13;
  min-height: 100vh;&#13;
  display: flex;&#13;
  flex-direction: column;&#13;
}&#13;
&#13;
.wrapper {&#13;
  display: grid;&#13;
  justify-items: center;&#13;
  padding: 1rem;&#13;
  gap: 2.5rem;&#13;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));&#13;
}&#13;
&#13;
@media (max-width: 768px) {&#13;
  .wrapper {&#13;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));&#13;
  }&#13;
}&#13;
&#13;
@media (max-width: 480px) {&#13;
  .wrapper {&#13;
    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));&#13;
  }&#13;
}&#13;
&#13;
.card {&#13;
  display: flex;&#13;
  flex-direction: column;&#13;
  position: relative;&#13;
  border-radius: 5%;&#13;
  background-color: black;&#13;
  max-width: 350px;&#13;
  width: 100%;&#13;
  height: fit-content;&#13;
}&#13;
&#13;
.image-container {&#13;
  position: relative;&#13;
  overflow: hidden;&#13;
  width: 100%;         &#13;
  max-width: 350px;    &#13;
  height: auto;&#13;
}&#13;
&#13;
.image {&#13;
  width: 100%;     &#13;
  height: auto;    &#13;
  display: block;&#13;
  border-radius: 5%;&#13;
}&#13;
&#13;
.foil {&#13;
  position: absolute;&#13;
  top: 0;&#13;
  right: 0;  &#13;
  border-radius: 5%;&#13;
  width: 100%;  &#13;
  height: 100%;&#13;
  object-fit: cover;&#13;
  transition: transform 0.2s ease;&#13;
}&#13;
&#13;
.card:hover {&#13;
  transform: scale(1.1);&#13;
}&#13;
&#13;
img {&#13;
  width: 100%;&#13;
  display: block;&#13;
}&#13;
&#13;
.pagination {&#13;
  display: flex;&#13;
  flex-direction: column;&#13;
  align-items: center;&#13;
  justify-content: center;&#13;
  gap: 0.75rem;&#13;
  margin-top: 2rem;&#13;
}&#13;
&#13;
.pagination button {&#13;
  padding: 6px 10px;&#13;
  min-width: 36px;&#13;
  background-color: #f1f1f1;&#13;
  border: 1px solid #ccc;&#13;
  border-radius: 4px;&#13;
  color: #333;&#13;
  font-size: 14px;&#13;
  cursor: pointer;&#13;
  transition: background-color 0.2s ease, transform 0.1s ease;&#13;
}&#13;
&#13;
.pagination button:hover:not(:disabled) {&#13;
  background-color: #ddd;&#13;
  transform: translateY(-1px);&#13;
}&#13;
&#13;
.pagination button:disabled {&#13;
  opacity: 0.5;&#13;
  cursor: default;&#13;
}&#13;
&#13;
.pagination button.active-page {&#13;
  background-color: #007acc;&#13;
  color: white;&#13;
  font-weight: bold;&#13;
  border-color: #007acc;&#13;
}&#13;
&#13;
.go-to-page {&#13;
  margin-left: 1rem;&#13;
  display: inline-flex;&#13;
  align-items: center;&#13;
  gap: 0.5rem;&#13;
}&#13;
&#13;
.go-to-page input[type="number"] {&#13;
  width: 60px;&#13;
  padding: 4px 6px;&#13;
  border-radius: 4px;&#13;
  border: 1px solid #ccc;&#13;
}&#13;
&#13;
.go-to-page button {&#13;
  padding: 4px 10px;&#13;
  border-radius: 4px;&#13;
  border: 1px solid #555;&#13;
  background-color: #333;&#13;
  cursor: pointer;&#13;
  color: white;&#13;
}&#13;
&#13;
.go-to-page label {&#13;
  color: white !important;&#13;
}&#13;
&#13;
.go-to-page button:hover {&#13;
  background-color: #444;&#13;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description>A widget used to display an MTG card via the provided data on the card.</description>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>mtg_card</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>MTG Card</name>
        <option_schema>[{"name":"page_limit","section":"other","default_value":"24","label":"Cards Per Page","type":"integer"},{"name":"page","section":"other","default_value":"1","label":"Page","type":"integer"},{"name":"searchterm","section":"other","label":"Search Term","type":"string"}]</option_schema>
        <public>true</public>
        <roles>x_759224_magic_c_0.admin</roles>
        <script><![CDATA[(function() {
    data.records = [];

    //Detect first load vs. pagination
    var page = (input && input.page) ? parseInt(input.page, 10) : 1;
    var pageSize = parseInt(options.page_limit || 18, 10);
    var offset = (page - 1) * pageSize;
    var searchTerm = (input && input.searchTerm) ? input.searchTerm.trim() : '';

    var utils = new x_759224_magic_c_0.magic_utils();

    //Count total cards
    var countGR = new GlideRecord('x_759224_magic_c_0_mtg_cards');
    if (searchTerm) countGR.addQuery('name', 'CONTAINS', searchTerm);
    countGR.query();
    data.totalCount = countGR.getRowCount();

    //Fetch paginated records
    var cardsGR = new GlideRecord('x_759224_magic_c_0_mtg_cards');
    if (searchTerm) cardsGR.addQuery('name', 'CONTAINS', searchTerm);
    cardsGR.orderBy('name');
    cardsGR.query();

    var i = 0, added = 0;
    while (cardsGR.next()) {
        if (i >= offset && added < pageSize) {
            data.records.push({
                sysId: cardsGR.getValue('sys_id'),
                name: cardsGR.getValue('name'),
                collectorNumber: cardsGR.getValue('collector_number'),
                cmc: cardsGR.getValue('cmc'),
                rarity: cardsGR.getValue('rarity'),
                foil: cardsGR.getDisplayValue('foiling'),
                price: cardsGR.getValue('price'),
                sets: cardsGR.getDisplayValue('sets'),
                producedMana: cardsGR.getValue('face_one_produced_mana'),

                // Legalities
                standard: cardsGR.getValue('standard_legality'),
                standardBrawl: cardsGR.getValue('standardbrawl_legality'),
                historic: cardsGR.getValue('historic_legality'),
                alchemy: cardsGR.getValue('alchemy_legality'),
                pioneer: cardsGR.getValue('pioneer_legality'),
                explorer: cardsGR.getValue('explorer_legality'),
                modern: cardsGR.getValue('modern_legality'),
                legacy: cardsGR.getValue('legacy_legality'),
                vintage: cardsGR.getValue('vintage_legality'),
                pauper: cardsGR.getValue('pauper_legality'),
                paupercommander: cardsGR.getValue('paupercommander_legality'),
                commander: cardsGR.getValue('commander_legality'),
                brawl: cardsGR.getValue('brawl_legality'),
                oathbreaker: cardsGR.getValue('oathbreaker_legality'),
                gladiator: cardsGR.getValue('gladiator_legality'),
                future: cardsGR.getValue('future_legality'),
                oldschool: cardsGR.getValue('oldschool_legality'),
                preDH: cardsGR.getValue('predh_legality'),
                premodern: cardsGR.getValue('premodern_legality'),
                timeless: cardsGR.getValue('timeless_legality'),

                // Front face
                frontFlavor: cardsGR.getValue('face_one_flavor_text'),
                frontOracle: cardsGR.getValue('face_one_oracle_text'),
                frontManaCost: cardsGR.getValue('face_one_mana_cost'),
                frontPower: cardsGR.getValue('face_one_power'),
                frontToughness: cardsGR.getValue('face_one_toughness'),
                typeLine: cardsGR.getValue('type_line'),
                frontColors: cardsGR.getValue('face_one_colors'),
                frontArtist: cardsGR.getValue('face_one_artist'),
                frontLoyalty: cardsGR.getValue('face_one_loyalty'),

                // Back face
                backFlavor: cardsGR.getValue('face_two_flavor_text'),
                backOracle: cardsGR.getValue('face_two_oracle_text'),
                backManaCost: cardsGR.getValue('face_two_mana_cost'),
                backPower: cardsGR.getValue('face_two_power'),
                backToughness: cardsGR.getValue('face_two_toughness'),
                backTypeLine: cardsGR.getValue('face_two_type_line'),
                backArtist: cardsGR.getValue('face_two_artist'),
                backColors: cardsGR.getValue('face_two_colors'),
                backLoyalty: cardsGR.getValue('face_two_loyalty'),

                // Images
                fImg: utils.getImgSrc(cardsGR.getValue('front_image')),
                bImg: utils.getImgSrc(cardsGR.getValue('back_image')),
                displayImg: true,

                // Links
                tcg: cardsGR.getValue('tcgplayer_purchase'),
                cardMarket: cardsGR.getValue('cardmarket_purchase'),
                cardHoarder: cardsGR.getValue('cardhoarder_purchase'),
                edhrec: cardsGR.getValue('edhrec'),
                gatherer: cardsGR.getValue('gatherer'),

                // Other
                isMultiFaced: cardsGR.getValue('is_multi_faced'),
                gameChanger: cardsGR.getValue('game_changer'),
                reserved: cardsGR.getValue('reserved_list'),
                keywords: cardsGR.getValue('keywords')
            });
            added++;
        }
        i++;
        if (added >= pageSize) break;
    }

    //Final response
    data.records = data.records || [];
    data.totalCount = data.totalCount || 0;
    data.pageSize = pageSize;
    data.currentPage = page;
    data.searchTerm = searchTerm;
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>greg</sys_created_by>
        <sys_created_on>2023-04-25 04:37:10</sys_created_on>
        <sys_id>e4c4775f979ae1107720f0571153af96</sys_id>
        <sys_mod_count>401</sys_mod_count>
        <sys_name>MTG Card</sys_name>
        <sys_package display_value="Magic Collection" source="x_759224_magic_c_0">c09f498f9741a1107720f0571153afe1</sys_package>
        <sys_policy/>
        <sys_scope display_value="Magic Collection">c09f498f9741a1107720f0571153afe1</sys_scope>
        <sys_update_name>sp_widget_e4c4775f979ae1107720f0571153af96</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-08-03 13:53:55</sys_updated_on>
        <template><![CDATA[<div class="wrapper">
  <button class="card"
          ng-repeat="r in c.data.records"
          ng-click="c.viewDetails(r)">
    <div class="image-container">
      <img class="image" ng-src="{{r.fImg}}" ng-alt="{{r.oracle}}" />
      <img class="foil" ng-if="r.foil != 'None'" src="x_759224_magic_c_0.foil.png"/>
    </div>
  </button>
</div>

<!-- Fallback if no cards -->
<div ng-if="c.pageCount() === 0" class="no-cards-message">
  No cards found.
</div>

<!-- Pagination Controls -->
<div class="pagination" ng-if="c.pageCount() > 1">
  <!-- Main Pagination Buttons -->
  <div class="pagination-buttons">
    <button ng-click="c.prevPage()" ng-disabled="c.currentPage === 1">‹</button>
    <button ng-click="c.setPage(1)" ng-class="{'active-page': c.currentPage === 1}">1</button>
    <span ng-if="c.currentPage > 4">…</span>
    
    <span ng-repeat="n in c.middlePages() track by $index">
      <button ng-click="c.setPage(n)" ng-class="{'active-page': c.currentPage === n}">
        {{n}}
      </button>
    </span>
    
    <span ng-if="c.currentPage < c.pageCount() - 3">…</span>
    <button ng-if="c.pageCount() > 1"
            ng-click="c.setPage(c.pageCount())"
            ng-class="{'active-page': c.currentPage === c.pageCount()}">
      {{c.pageCount()}}
    </button>
    <button ng-click="c.nextPage()" ng-disabled="c.currentPage === c.pageCount()">›</button>
  </div>
  <div class="go-to-page">
    <label for="pageInput">Go to page:</label>
    <input id="pageInput"
           type="number"
           ng-model="c.pageInput"
           min="1"
           max="{{c.pageCount()}}"
           ng-keypress="c.handlePageInput($event)" />
    <button ng-click="c.jumpToPage()">Go</button>
  </div>
</div>]]></template>
    </sp_widget>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>e4c4775f979ae1107720f0571153af96</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-11-19 01:01:19</sys_created_on>
        <sys_id>a0240b8cc3021210b7cebd73e4013159</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-19 01:01:19</sys_updated_on>
        <table>sp_widget</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
