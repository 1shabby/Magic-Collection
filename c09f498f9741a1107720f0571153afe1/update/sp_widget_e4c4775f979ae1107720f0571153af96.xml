<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function(spModal, $rootScope, $sce, $scope) {
    var c = this;

    // Pagination settings
    c.pageSize = 24;
    c.currentPage = 1;

    // Watch for data load and log info
    $scope.$watch(
        () => c.data.records,
        function(records) {
            if (Array.isArray(records) && records.length) {
                c.currentPage = 1; // Reset to first page when data changes
            }
        }
    );

    c.pageCount = function() {
        if (!c.data || !Array.isArray(c.data.records)) return 0;
        return Math.ceil(c.data.records.length / c.pageSize);
    };

    c.paginatedRecords = function() {
        if (!c.data || !Array.isArray(c.data.records)) return [];
        const start = (c.currentPage - 1) * c.pageSize;
        const paged = c.data.records.slice(start, start + c.pageSize);
        return paged;
    };

    c.nextPage = function() {
        if (c.currentPage < c.pageCount()) {
            c.currentPage++;
        }
    };

    c.prevPage = function() {
        if (c.currentPage > 1) {
            c.currentPage--;
        }
    };

    c.setPage = function(page) {
        c.currentPage = page;
    };

    c.middlePages = function() {
        const total = c.pageCount();
        const current = c.currentPage;
        const range = [];

        const start = Math.max(2, current - 2); // don't duplicate "1"
        const end = Math.min(total - 1, current + 2); // don't duplicate "last"

        for (let i = start; i <= end; i++) {
            range.push(i);
        }

        return range;
    };

    c.pageInput = '';

    c.jumpToPage = function() {
        const page = parseInt(c.pageInput, 10);
        if (!isNaN(page) && page >= 1 && page <= c.pageCount()) {
            c.currentPage = page;
            c.pageInput = ''; // optional: clear input after jump
        }
    };

    c.handlePageInput = function(event) {
        if (event.which === 13) { // Enter key
            c.jumpToPage();
        }
    };

   c.viewDetails = function(card) {
		 console.log(JSON.stringify(card));
var message =
  "<style>" +
  ".flip-card-wrapper {" +
    "flex-grow: 1;" +
    "max-width: 100%;" +
    "width: 100%;" +
    "perspective: 1000px;" +
    "margin: 0 auto;" +
  "}" +
  ".flip-card {" +
    "width: 100%;" +
    "height: auto;" +
    "position: relative;" +
  "}" +
  ".flip-card-inner {" +
    "position: relative;" +
    "width: 100%;" +
    "padding-top: 140%; /* MTG card aspect ratio (~2.5 x 3.5 inches) */" +
    "transition: transform 0.8s;" +
    "transform-style: preserve-3d;" +
  "}" +
  ".flip-card.flipped .flip-card-inner { transform: rotateY(180deg); }" +
  ".flip-card-front, .flip-card-back {" +
    "position: absolute;" +
    "top: 0; left: 0;" +
    "width: 100%; height: 100%;" +
    "border-radius: 8px;" +
    "backface-visibility: hidden;" +
    "display: flex; align-items: center; justify-content: center;" +
  "}" +
  ".flip-card-back { transform: rotateY(180deg); }" +

  ".flip-card-front img, .flip-card-back img {" +
    "width: 100%;" +
    "height: 100%;" +
    "object-fit: contain;" +
    "border-radius: 8px;" +
  "}" +

  "@media (max-width: 768px) {" +
    ".card-modal-content { flex-direction: column !important; align-items: center; }" +
    ".flip-card-wrapper { " +
      "max-width: 90%;" +
      "min-width: 300px;" +         // Added min-width to keep card readable
    "}" +
    ".flip-card-inner { " +
      "min-height: 430px;" +       // Added min-height to maintain aspect ratio and size
    "}" +
  "}" +
  "</style>" +

  "<div class='card-modal-content' style='display: flex; gap: 20px; max-width: 100%;'>" +

    // Column 1 – Card image, button, metadata
    "<div style='flex: 2; text-align: center; display: flex; flex-direction: column; align-items: center;'>" +
      "<div class='flip-card-wrapper'>" +
        "<div class='flip-card' id='flipCard'>" +
          "<div class='flip-card-inner'>" +
            "<div class='flip-card-front'>" +
              "<img src='" + card.fImg + "' />" +
            "</div>" +
            (card.bImg
              ? "<div class='flip-card-back'>" +
                  "<img src='" + card.bImg + "' />" +
                "</div>"
              : "") +
          "</div>" +
        "</div>" +
      "</div>" +

      (card.multiFaced
        ? "<button id='flipBtn' style='margin-top: 10px; padding: 8px 12px; background: #007acc; color: #fff; border: none; border-radius: 5px; cursor: pointer;'>Flip Card</button>"
        : "") +

      "<div style='margin-top: 10px;'><strong>Set:</strong> " + card.sets + "</div>" +
      "<div><strong>Price:</strong> $" + card.price + "</div>" +
      "<div><strong>Foiling:</strong> " + card.foil + "</div>" +
    "</div>" +

    // Column 2 – Oracle & Flavor
    "<div style='flex: 2;'>" +
      "<div style='margin-bottom: 15px;'><strong>Oracle:</strong><br>" + (card.oracle || "N/A") + "</div>" +
      "<div><strong>Flavor:</strong><br>" + (card.frontFlavor || "N/A") + "</div>" +
    "</div>" +

    // Column 3 – Links
    "<div style='flex: 1;'>" +
      "<div><a href='" + card.tcg + "' target='_blank'>TCGPlayer</a></div>" +
      "<div><a href='" + card.cardMarket + "' target='_blank'>Cardmarket</a></div>" +
      "<div><a href='" + card.cardHoarder + "' target='_blank'>Cardhoarder</a></div>" +
      "<div><a href='" + card.edhrec + "' target='_blank'>EDHREC</a></div>" +
    "</div>" +
  "</div>" +

  "<script>" +
    "setTimeout(function() {" +
      "var flipBtn = document.getElementById('flipBtn');" +
      "var flipCard = document.getElementById('flipCard');" +
      "if (flipBtn && flipCard) {" +
        "flipBtn.addEventListener('click', function() {" +
          "flipCard.classList.toggle('flipped');" +
        "});" +
      "}" +
    "}, 100);" +
  "</script>";
;


    c.trustedMessage = $sce.trustAsHtml(message);

    spModal.open({
        title: card.name,
        message: c.trustedMessage,
			  size: 'custom',
        buttons: [{
            label: '${Close}',
            primary: true
        }]
    });
};



    // Listen for external search broadcast
    $rootScope.$on('searchTerm', function(event, term) {
        c.data.searchTerm = term;
        c.currentPage = 1;
        c.server.update({
            searchTerm: term
        });
    });
};]]></client_script>
        <controller_as>c</controller_as>
        <css>body {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

.wrapper {
  display: grid;
  justify-items: center;
  padding: 1rem;
  gap: 2.5rem;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
}

@media (max-width: 768px) {
  .wrapper {
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  }
}

@media (max-width: 480px) {
  .wrapper {
    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
  }
}

.card {
  display: flex;
  flex-direction: column;
  position: relative;
  border-radius: 1rem;
  background-color: black;
  max-width: 350px;
  width: 100%;
  height: fit-content;
}

.image-container {
  position: relative;
  overflow: hidden;
  width: 100%;         
  max-width: 350px;    
  height: auto;
}

.image {
  border-radius: 1rem;
  width: 100%;     
  height: auto;    
  display: block;
}

.foil {
  position: absolute;
  top: 0;
  right: 0;  
  border-radius: 2rem;
  width: 100%;  
  height: 100%;
  object-fit: cover;
  transition: transform 0.2s ease;
}

.card:hover {
  transform: scale(1.1);
}

img {
  width: 100%;
  display: block;
}

.pagination {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 0.75rem;
  margin-top: 2rem;
}

.pagination button {
  padding: 6px 10px;
  min-width: 36px;
  background-color: #f1f1f1;
  border: 1px solid #ccc;
  border-radius: 4px;
  color: #333;
  font-size: 14px;
  cursor: pointer;
  transition: background-color 0.2s ease, transform 0.1s ease;
}

.pagination button:hover:not(:disabled) {
  background-color: #ddd;
  transform: translateY(-1px);
}

.pagination button:disabled {
  opacity: 0.5;
  cursor: default;
}

.pagination button.active-page {
  background-color: #007acc;
  color: white;
  font-weight: bold;
  border-color: #007acc;
}

.go-to-page {
  margin-left: 1rem;
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
}

.go-to-page input[type="number"] {
  width: 60px;
  padding: 4px 6px;
  border-radius: 4px;
  border: 1px solid #ccc;
}

.go-to-page button {
  padding: 4px 10px;
  border-radius: 4px;
  border: 1px solid #555;
  background-color: #333;
  cursor: pointer;
  color: white;
}

.go-to-page label {
  color: white !important;
}

.go-to-page button:hover {
  background-color: #444;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description>A widget used to display an MTG card via the provided data on the card.</description>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>mtg_card</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>MTG Card</name>
        <option_schema>[{"name":"page_limit","section":"other","default_value":"24","label":"Cards Per Page","type":"integer"}]</option_schema>
        <public>true</public>
        <roles>x_759224_magic_c_0.admin</roles>
        <script><![CDATA[(function() {
    data.records = [];
    var utils = new x_759224_magic_c_0.magic_utils();
		
    var searchTerm = input?.searchTerm?.trim() || '';

    var cardsGR = new GlideRecord('x_759224_magic_c_0_mtg_cards');
    cardsGR.orderBy('name');

    if (searchTerm) {
        cardsGR.addQuery('name', 'CONTAINS', searchTerm);
    }

    if (options.limit) {
        cardsGR.setLimit(options.limit);
    }

    cardsGR.query();

    while (cardsGR.next()) {
                data.records.push({
            name: cardsGR.getValue('name'),
            sets: cardsGR.getDisplayValue('sets'),
            foil: cardsGR.getDisplayValue('foiling'),
            price: cardsGR.getValue('price'),
						typeLine: cardsGR.getValue('type_line'),
					  frontFlavor: cardsGR.getValue('face_one_flavor_text'),
            oracle: cardsGR.getValue('face_one_oracle_text'),
            multiFaced: cardsGR.getValue('is_multi_faced'),
						fImg: utils.getImgSrc(cardsGR.getValue('front_image')),
            bImg: utils.getImgSrc(cardsGR.getValue('back_image')),
						tcg: cardsGR.getValue('tcgplayer_purchase'),
						cardMarket: cardsGR.getValue('cardmarket_purchase'),
						cardHoarder: cardsGR.getValue('cardHoarder_purchase'),
						edhrec: cardsGR.getValue('edhrec'),
            displayImg: true
        });
    }
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>greg</sys_created_by>
        <sys_created_on>2023-04-25 04:37:10</sys_created_on>
        <sys_id>e4c4775f979ae1107720f0571153af96</sys_id>
        <sys_mod_count>320</sys_mod_count>
        <sys_name>MTG Card</sys_name>
        <sys_package display_value="Magic Collection" source="x_759224_magic_c_0">c09f498f9741a1107720f0571153afe1</sys_package>
        <sys_policy/>
        <sys_scope display_value="Magic Collection">c09f498f9741a1107720f0571153afe1</sys_scope>
        <sys_update_name>sp_widget_e4c4775f979ae1107720f0571153af96</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-08-01 18:58:50</sys_updated_on>
        <template><![CDATA[<div class="wrapper">
  <button class="card"
          ng-repeat="r in c.paginatedRecords()"
          ng-click="c.viewDetails(r)">
    <div class="image-container">
      <img class="image" ng-src="{{r.fImg}}" ng-alt="{{r.oracle}}" />
      <img class="foil" ng-if="r.foil != 'None'" src="x_759224_magic_c_0.foil.png"/>
    </div>
  </button>
</div>

<!-- Fallback if no cards -->
<div ng-if="c.pageCount() === 0" class="no-cards-message">
  No cards found.
</div>

<!-- Pagination Controls -->
<div class="pagination" ng-if="c.pageCount() > 1">
  <!-- Main Pagination Buttons -->
  <div class="pagination-buttons">
    <button ng-click="c.prevPage()" ng-disabled="c.currentPage === 1">‹</button>
    <button ng-click="c.setPage(1)" ng-class="{'active-page': c.currentPage === 1}">1</button>
    <span ng-if="c.currentPage > 4">…</span>
    
    <span ng-repeat="n in c.middlePages() track by $index">
      <button ng-click="c.setPage(n)" ng-class="{'active-page': c.currentPage === n}">
        {{n}}
      </button>
    </span>
    
    <span ng-if="c.currentPage < c.pageCount() - 3">…</span>
    <button ng-if="c.pageCount() > 1"
            ng-click="c.setPage(c.pageCount())"
            ng-class="{'active-page': c.currentPage === c.pageCount()}">
      {{c.pageCount()}}
    </button>
    <button ng-click="c.nextPage()" ng-disabled="c.currentPage === c.pageCount()">›</button>
  </div>
  <div class="go-to-page">
    <label for="pageInput">Go to page:</label>
    <input id="pageInput"
           type="number"
           ng-model="c.pageInput"
           min="1"
           max="{{c.pageCount()}}"
           ng-keypress="c.handlePageInput($event)" />
    <button ng-click="c.jumpToPage()">Go</button>
  </div>
</div>]]></template>
    </sp_widget>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>e4c4775f979ae1107720f0571153af96</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-11-19 01:01:19</sys_created_on>
        <sys_id>a0240b8cc3021210b7cebd73e4013159</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-19 01:01:19</sys_updated_on>
        <table>sp_widget</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
