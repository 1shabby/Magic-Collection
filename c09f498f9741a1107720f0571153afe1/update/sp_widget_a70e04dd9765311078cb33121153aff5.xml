<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($scope) {
  /* widget controller */
  var c = this;

  c.dragStart = function (event) {
    //change target appearance so we can see we have grabbed it
    event.target.style.opacity = '0.7';
    //change cursor
    event.target.style.cursor = 'grabbing';
    //prep for move
    event.dataTransfer.effectAllowed = 'move';
    event.dataTransfer.setData('text/html', event.target.innerHTML);
    c.draggedNode = event.target.id;
    //ignore all other tasks until we are done
    document.querySelectorAll('.task').forEach(function (cur) {
      if (cur.id !== event.target.id) {
        cur.classList.add('disabled');
      }
    })
  };

  c.dragEnd = function (event) {
    event.target.style.opacity = '1';
    event.target.style.cursor = 'grab';
    var cols = document.querySelectorAll('.task-col-content');
    cols.forEach(function (cur) {
      cur.classList.remove('over')
    });
    document.querySelectorAll('.task').forEach(function (cur) {
      cur.classList.remove('disabled');
    })
  };

  c.dragEnter = function (event) {
    //set class for things being dragged over
    if (event.target && event.target.classList) {
      event.target.classList.add('over');
    }
  };

  c.dragLeave = function (event) {
    //remove class for things being dragged over
    if (event.target && event.target.classList) {
      event.target.classList.remove('over');
    }
  };

  c.dragOver = function (event) {
    if (event.preventDefault) {
      event.preventDefault(); // Necessary. Allows us to drop.
    }
    event.dataTransfer.dropEffect = 'move';
    return false;
  };

  //recursive function to determine where we drop
  function findColType(element) {
    var maxLevels = 4;
    return checkElement(element, 1);

    function checkElement(element, level) {
      if (!element) {
        return null;
      }
      if (level >= maxLevels) {
        return null;
      }
      if (element.classList && element.classList.contains('task-col')) {
        return element.id;
      }
      return checkElement(element.parentElement, level++);
    }
  }

  c.drop = function (event) {
    if (event.stopPropagation) {
      event.stopPropagation(); // stops the browser from redirecting.
    }
    var colType = findColType(event.target);
    c.data.tasks[parseInt(c.draggedNode)].state = colType;
    //apply changes to angular if necessary
    $scope.$apply();
  };
};]]></client_script>
        <controller_as>c</controller_as>
        <css>[draggable] {&#13;
  -moz-user-select: none;&#13;
  -khtml-user-select: none;&#13;
  -webkit-user-select: none;&#13;
  user-select: none;&#13;
  /* Required to make elements draggable in old WebKit */&#13;
  -khtml-user-drag: element;&#13;
  -webkit-user-drag: element;&#13;
}&#13;
&#13;
div{&#13;
    --col-header-color: rgb(242, 242, 242);&#13;
    --taskboard-border-color: rgb(210, 214, 215); &#13;
    --col-highlight-color: rgb(255, 255, 210);&#13;
}&#13;
&#13;
#drag-n-drop{&#13;
    background-color:white;&#13;
    border-radius: 6px;&#13;
    padding: 6px;&#13;
}&#13;
&#13;
#taskboard-container {&#13;
    display:grid;&#13;
    grid-template-columns: 1fr 1fr 1fr 1fr;&#13;
    grid-template-rows: 85px auto;&#13;
    border: 1px solid var(--taskboard-border-color);&#13;
    height: 600px;&#13;
}&#13;
&#13;
.taskboard-header {&#13;
    grid-column: 1/5;&#13;
    font-weight: bold;&#13;
    border-bottom: 1px solid var(--taskboard-border-color);&#13;
}&#13;
&#13;
.taskboard-header&gt;h1 {&#13;
    text-align:center;&#13;
}&#13;
&#13;
.task-col {&#13;
    overflow-y: auto;&#13;
    display:flex;&#13;
    flex-direction: column;&#13;
}&#13;
&#13;
.task-col-content{&#13;
    padding: 6px;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.task-col-content.over {&#13;
    background-color: var(--col-highlight-color);&#13;
}&#13;
&#13;
.task-col-header {&#13;
    background-color: var(--col-header-color);&#13;
    text-align: center;&#13;
    font-weight: bold;&#13;
}&#13;
&#13;
.task-col.right-border {&#13;
    border-right: 1px solid var(--taskboard-border-color);&#13;
}&#13;
&#13;
.task {&#13;
    margin: 6px;&#13;
    box-shadow: 2px 2px 2px 1px rgba(0,0,0,0.37);&#13;
    border-radius: 3px;&#13;
    padding: 3px;&#13;
    cursor: grab;&#13;
    pointer-events: all;&#13;
}&#13;
&#13;
.task.disabled {&#13;
    pointer-events:none;&#13;
}&#13;
&#13;
.task-header {&#13;
    font-weight: bold;&#13;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>drag_drop</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Drag&amp;Drop</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */
  var tasks = [
    {"id":0, "title":"My Task!", "description":"this is a description text","state":"todo"},
    {"id":1, "title":"Task2", "description":"task2 description :D","state":"todo"},
    {"id":2, "title":"Delete Task2", "description":"I find it offensive","state":"todo"}
  ];
	var cards = [];
	var cardsGr = new GlideRecord('x_759224_magic_c_0_mtg_cards');
	cardsGr.addEncodedQuery('ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
	cardsGr.query();
	
	while (cardsGr.next()){
		cards.push(cardsGr.getValue('front_image'));
	}
	
  data.tasks = tasks;
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>greg</sys_created_by>
        <sys_created_on>2023-09-26 20:07:13</sys_created_on>
        <sys_id>a70e04dd9765311078cb33121153aff5</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>Drag&amp;Drop</sys_name>
        <sys_package display_value="Magic Collection" source="x_759224_magic_c_0">c09f498f9741a1107720f0571153afe1</sys_package>
        <sys_policy/>
        <sys_scope display_value="Magic Collection">c09f498f9741a1107720f0571153afe1</sys_scope>
        <sys_update_name>sp_widget_a70e04dd9765311078cb33121153aff5</sys_update_name>
        <sys_updated_by>greg</sys_updated_by>
        <sys_updated_on>2023-09-26 21:10:02</sys_updated_on>
        <template><![CDATA[<div id="drag-n-drop">
    <!-- script for accessing angular from outside -->
    <script>
        //gets the angular scope from outside because 
        //we don't have access to it for drag events
        function getScope() {
            return angular.element('#drag-n-drop').scope().c;
        }
    </script>
    <!-- container for drag n drop task board -->
    <div id="taskboard-container">
        <div class="taskboard-header">
            <h1>My Mock Task Board</h1>
        </div>
        <div class="task-col right-border" id="todo">
            <div class="task-col-header">
                To Do
            </div>
            <div class="task-col-content" ondragenter="getScope().dragEnter(event)" 
            ondragleave="getScope().dragLeave(event)" 
            ondragover="getScope().dragOver(event)" 
            ondrop="getScope().drop(event)">
                <div class="task" ng-repeat="task in c.data.tasks" ng-if="task.state=='todo'" id="{{task.id}}"
                draggable="true" ondragstart="getScope().dragStart(event)" ondragend="getScope().dragEnd(event)">
                    <div class="task-header">
                        {{task.title}}
                    </div>
                    <div class="task-description">
                        {{task.description}}
                    </div>
                </div>
            </div>
        </div>
        <div class="task-col right-border" id="in-progress">
            <div class="task-col-header">
                In Progress
            </div>
            <div class="task-col-content" ondragenter="getScope().dragEnter(event)" 
            ondragleave="getScope().dragLeave(event)" 
            ondragover="getScope().dragOver(event)" 
            ondrop="getScope().drop(event)">
                <div class="task" ng-repeat="task in c.data.tasks" ng-if="task.state=='in-progress'" id="{{task.id}}"
                draggable="true" ondragstart="getScope().dragStart(event)" ondragend="getScope().dragEnd(event)">
                    <div class="task-header">
                        {{task.title}}
                    </div>
                    <div class="task-description">
                        {{task.description}}
                    </div>
                </div>
            </div>
        </div>
        <div class="task-col right-border" id="review">
            <div class="task-col-header">
                Review
            </div>
            <div class="task-col-content" ondragenter="getScope().dragEnter(event)" 
            ondragleave="getScope().dragLeave(event)" 
            ondragover="getScope().dragOver(event)" 
            ondrop="getScope().drop(event)">
                <div class="task" ng-repeat="task in c.data.tasks" ng-if="task.state=='review'" id="{{task.id}}"
                draggable="true" ondragstart="getScope().dragStart(event)" ondragend="getScope().dragEnd(event)">
                    <div class="task-header">
                        {{task.title}}
                    </div>
                    <div class="task-description">
                        {{task.description}}
                    </div>
                </div>
            </div>
        </div>
        <div class="task-col" id="done">
            <div class="task-col-header">
                Done
            </div>
            <div class="task-col-content" ondragenter="getScope().dragEnter(event)" 
            ondragleave="getScope().dragLeave(event)" 
            ondragover="getScope().dragOver(event)" 
            ondrop="getScope().drop(event)">
                <div class="task" ng-repeat="task in c.data.tasks" ng-if="task.state=='done'" id="{{task.id}}"
                draggable="true" ondragstart="getScope().dragStart(event)" ondragend="getScope().dragEnd(event)">
                    <div class="task-header">
                        {{task.title}}
                    </div>
                    <div class="task-description">
                        {{task.description}}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>]]></template>
    </sp_widget>
</record_update>
