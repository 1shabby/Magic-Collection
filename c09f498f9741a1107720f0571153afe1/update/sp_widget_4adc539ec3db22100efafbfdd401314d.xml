<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($scope, $window, $timeout) {
    var c = this;

    if (c.data.deck_name) {
        document.title = c.data.deck_name;
    }

    c.$onInit = function() {
        var params = new URLSearchParams($window.location.search);
        var deckIdParam = params.get('deck_id');
        if (deckIdParam) {
            c.data.deck_sys_id = deckIdParam;
        }

        // Sort and store columns once
        $scope.columnsList = [];

        const computeSortedColumns = function() {
            const columns = [];
            angular.forEach($scope.data.columns, function(cards, key) {
                const totalQuantity = cards.reduce((sum, card) => {
                    return sum + (parseInt(card.quantity, 10) || 0);
                }, 0);

                columns.push({
                    key: key,
                    cards: cards,
                    totalQuantity: totalQuantity
                });
            });

            return columns.sort(function(a, b) {
                if (a.key === 'Commander') return -1;
                if (b.key === 'Commander') return 1;
                return a.key.localeCompare(b.key);
            });
        };

        // Store precomputed list to avoid digest loop
        $scope.columnsList = computeSortedColumns();

        // Utility
        $scope.getCardTags = function(card) {
            var tags = [];
            if (card.is_commander) tags.push("Commander");
            if (card.is_maybeboard) tags.push("Maybeboard");
            if (card.is_sideboard) tags.push("Sideboard");
            return tags.join(", ");
        };

        $scope.viewDeck = function(deckId) {
            $window.location.href = '?id=deck_view&deck_id=' + deckId;
        };

        // Main layout logic (after DOM render)
        $timeout(function renderBalancedColumns() {
            const columnsContainer = document.getElementById('dynamic-deck-columns');
            if (!columnsContainer || !$scope.data.columns) return;

            const NUM_COLUMNS = 7;
            const OVERLAP_PER_CARD = 25 * 16;
            const columnHeights = Array(NUM_COLUMNS).fill(0);
            const columns = [];

            // Create empty columns
            for (let i = 0; i < NUM_COLUMNS; i++) {
                const col = document.createElement('div');
                col.className = 'deck-column';
                columns.push(col);
                columnsContainer.appendChild(col);
            }

            const dynamicCols = $scope.columnsList.filter(col =>
                col.key !== 'Maybeboard' && col.key !== 'Sideboard'
            );

            dynamicCols.forEach(col => {
                const estimatedHeight = col.cards.length * OVERLAP_PER_CARD;
                const shortestIndex = columnHeights.indexOf(Math.min(...columnHeights));
                const targetCol = columns[shortestIndex];
                columnHeights[shortestIndex] += estimatedHeight;

                const colHeader = document.createElement('div');
                colHeader.className = 'deck-column-header';
                colHeader.textContent = col.key; // no quantity for now
                targetCol.appendChild(colHeader);

                const stack = document.createElement('div');
                stack.className = 'card-stack';

                col.cards.forEach((card, index) => {
                    const cardButton = document.createElement('button');
                    cardButton.className = 'stacked-card card-button';
                    cardButton.style.zIndex = (index + 1) * 10;
                    cardButton.type = 'button';

                    const imgContainer = document.createElement('div');
                    imgContainer.className = 'image-container';

                    const flipper = document.createElement('div');
                    flipper.className = 'card-flipper';

                    const front = document.createElement('img');
                    front.className = 'card-face front-face';
                    front.src = card.front_image_url;
                    front.alt = card.name;

                    flipper.appendChild(front);

                    // Add back if it exists
                    if (card.back_image_url) {
                        const back = document.createElement('img');
                        back.className = 'card-face back-face';
                        back.src = card.back_image_url;
                        back.alt = `${card.name} (Back)`;
                        flipper.appendChild(back);

                        // Flip Button
                        const flipBtn = document.createElement('button');
                        flipBtn.className = 'flip-button';
                        flipBtn.innerText = '↺'; // You could use an icon here

                        flipBtn.addEventListener('click', (e) => {
                            e.stopPropagation();
                            e.preventDefault();
                            flipper.classList.toggle('flipped');
                        });

                        imgContainer.appendChild(flipBtn);
                    }

                    imgContainer.appendChild(flipper);
                    cardButton.appendChild(imgContainer);

                    const quantityTag = document.createElement('div');
                    quantityTag.className = 'quantity-tag';
                    quantityTag.textContent = card.quantity;
                    imgContainer.appendChild(quantityTag);

                    // Game Changer tag (top-right)
                    if (card.is_gc) {
                        const gameChangerTag = document.createElement('div');
                        gameChangerTag.className = 'game-changer-tag';

                        const icon = document.createElement('img');
                        icon.src = 'x_759224_magic_c_0.game_changer_diamond.png';
                        icon.alt = 'Game Changer';
                        icon.className = 'game-changer-icon';

                        gameChangerTag.appendChild(icon);
                        imgContainer.appendChild(gameChangerTag);
                    }


                    const img = document.createElement('img');
                    img.className = 'image';
                    img.src = card.front_image_url;
                    img.alt = card.name;

                    if (card.foil) {
                        const foilOverlay = document.createElement('img');
                        foilOverlay.className = 'foil-overlay';
                        foilOverlay.src = 'x_759224_magic_c_0.foil.png';
                        foilOverlay.alt = 'Foil overlay';
                        imgContainer.appendChild(foilOverlay);
                    }

                    imgContainer.appendChild(img);
                    cardButton.appendChild(imgContainer);
                    stack.appendChild(cardButton);

                    const hoverButtons = document.createElement('div');
                    hoverButtons.className = 'hover-buttons';

                    const plusBtn = document.createElement('button');
                    plusBtn.className = 'hover-btn plus';
                    plusBtn.textContent = '+';
                    plusBtn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        e.preventDefault();
                        $scope.incrementCard(card, e);
                        $scope.$applyAsync();
                    });

                    const minusBtn = document.createElement('button');
                    minusBtn.className = 'hover-btn minus';
                    minusBtn.textContent = '−';
                    minusBtn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        e.preventDefault();
                        $scope.decrementCard(card, e);
                        $scope.$applyAsync();
                    });

                    const modalBtn = document.createElement('button');
                    modalBtn.className = 'hover-btn card-modal';
                    modalBtn.textContent = '>';
                    modalBtn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        e.preventDefault();
                        $scope.openCardModal(card, e);
                        $scope.$applyAsync();
                    });

                    hoverButtons.appendChild(plusBtn);
                    hoverButtons.appendChild(minusBtn);
                    hoverButtons.appendChild(modalBtn);

                    imgContainer.appendChild(hoverButtons);
                    cardButton.appendChild(imgContainer);

                    const priceInfo = document.createElement('div');
                    priceInfo.className = 'price-info';

                    const priceDiv = document.createElement('div');
                    priceDiv.className = 'prices';
                    priceDiv.textContent = 'Price: $' + card.price;

                    priceInfo.appendChild(priceDiv);
                    cardButton.appendChild(priceInfo);

                    stack.appendChild(cardButton);
                });

                targetCol.appendChild(stack);
            });
        }, 0);
    };
};]]></client_script>
        <controller_as>c</controller_as>
        <css>.deck-container {&#13;
  display: flex;&#13;
  flex-wrap: nowrap; /* no wrapping */&#13;
  align-items: flex-start;&#13;
  padding: $double-space;&#13;
  gap: 2rem;&#13;
  width: 100%;&#13;
  overflow-x: auto;&#13;
  justify-content: space-between;&#13;
  background-color: $brand-primary;&#13;
  border-radius: $single-space;&#13;
  margin-top: $double-space;&#13;
  margin-bottom: 20px;&#13;
}&#13;
&#13;
/* Left side dynamic columns */&#13;
.deck-columns {&#13;
  display: grid;&#13;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); /* Uniform column width */&#13;
  gap: 2rem; /* defined gap between dynamic columns */&#13;
  flex: 1 1 auto;&#13;
  min-width: 0;&#13;
  background-color: $brand-primary;&#13;
}&#13;
&#13;
/* Right side fixed horizontal row of Maybeboard + Sideboard */&#13;
.deck-anchored-columns {&#13;
  display: flex;&#13;
  flex-direction: row;&#13;
  gap: 1rem; /* smaller gap between Maybeboard and Sideboard */&#13;
  flex: 0 0 auto;&#13;
  min-width: auto;&#13;
  max-width: none;&#13;
  justify-content: flex-end;&#13;
  margin-left: 1rem; /* reduce gap between last dynamic column and Maybeboard */&#13;
}&#13;
&#13;
/* Column Styling */&#13;
.deck-column {&#13;
  min-width: 250px; /* Same width for dynamic and anchored columns */&#13;
  max-width: 250px;&#13;
  display: flex;&#13;
  flex-direction: column;&#13;
  overflow: visible;&#13;
}&#13;
&#13;
.deck-column-header {&#13;
  font-weight: bold;&#13;
  font-size: 1.5rem;&#13;
  color: white;&#13;
  z-index: 10;&#13;
  background-color: $brand-primary;&#13;
  margin-top: 1rem;&#13;
  padding-bottom: 1rem;&#13;
}&#13;
&#13;
/* Card Stack */&#13;
.card-stack {&#13;
  position: relative;&#13;
  width: 100%;&#13;
  overflow: hidden;&#13;
  z-index: 10;&#13;
  background-color: $brand-primary;&#13;
}&#13;
&#13;
/* Stack Overlap */&#13;
.stacked-card {&#13;
  position: relative;&#13;
  margin-top: -31rem; /*controls how tightly stacked they are in the column*/&#13;
  transition: transform 0.5s ease;&#13;
  z-index: 1;&#13;
}&#13;
&#13;
/* Top card and single-card columns shouldn't overlap */&#13;
.stacked-card:first-child {&#13;
  margin-top: 0;&#13;
}&#13;
&#13;
/* Prevent shifting on hover if it's the only card */&#13;
.card-stack:only-child .stacked-card:hover {&#13;
  transform: none !important;&#13;
}&#13;
&#13;
/* Only shift hovered card forward */&#13;
.stacked-card:hover {&#13;
  z-index: 999 !important;&#13;
}&#13;
&#13;
/* Move only the cards *after* the hovered one downward */&#13;
.stacked-card:hover ~ .stacked-card {&#13;
  transform: translateY(35rem);&#13;
  z-index: -999 !important /* Moves cards below the card stack z-index*/&#13;
}&#13;
&#13;
.image-container {&#13;
  position: relative;&#13;
  perspective:1000px;&#13;
  max-width: 250px;&#13;
  width: 100%;&#13;
  border-radius: 5%;&#13;
  overflow: hidden;&#13;
  /*box-shadow: 0 4px 8px rgba(0,0,0,0.3); */&#13;
}&#13;
&#13;
&#13;
/* Image */&#13;
.image {&#13;
  width: 100%;&#13;
  border-radius: 5%;&#13;
  display: block;&#13;
}&#13;
&#13;
/* Button styling for cards */&#13;
.card-button {&#13;
  width: 100%;&#13;
  max-width: 250px;&#13;
  background: none;&#13;
  border: none;&#13;
  padding: 0;&#13;
  cursor: pointer;&#13;
  outline: none;&#13;
  display: block;&#13;
  transition: transform 0.5s ease;&#13;
}&#13;
&#13;
/* Focus style for accessibility */&#13;
.card-button:focus {&#13;
  outline: 3px solid #00aaff;&#13;
  outline-offset: 3px;&#13;
}&#13;
&#13;
.column-count {&#13;
  font-weight: normal;&#13;
  font-size: 1rem;&#13;
  color: #ccc;&#13;
  margin-left: 0.4rem;&#13;
}&#13;
&#13;
.quantity-tag {&#13;
  position: absolute;&#13;
  top: 0;&#13;
  left: 0;&#13;
  width: 45px;&#13;
  height: 45px;&#13;
  background-color: rgba(101, 101, 101, 0.9); /* semi-transparent dark background */&#13;
  color: white;                        &#13;
  font-size: 16px;&#13;
  font-weight: bold;&#13;
  display: flex;&#13;
  align-items: flex-start;&#13;
  justify-content: flex-start;&#13;
  padding: 4px;&#13;
  clip-path: polygon(0 0, 100% 0, 0 100%);&#13;
  z-index: 20;&#13;
  pointer-events: none;&#13;
}&#13;
&#13;
.quantity-tag span {&#13;
  position: absolute;&#13;
  top: -30px;&#13;
  left: 5px;&#13;
  font-size: 0.65rem;&#13;
  font-weight: bold;&#13;
  color: white;&#13;
  white-space: nowrap;&#13;
  pointer-events: none;&#13;
}&#13;
&#13;
.game-changer-tag {&#13;
    position: absolute;&#13;
    top: 0;&#13;
    right: 0;&#13;
    width: 45px;&#13;
    height: 45px;&#13;
    background-color: rgba(255, 165, 0, 0.9); /* Orange/gold tone */&#13;
    color: white;&#13;
    font-size: 18px;&#13;
    font-weight: bold;&#13;
    display: flex;&#13;
    align-items: flex-start;&#13;
    justify-content: flex-end;&#13;
    padding: 4px;&#13;
    clip-path: polygon(100% 0, 0 0, 100% 100%);&#13;
    z-index: 20;&#13;
    pointer-events: none;&#13;
    text-shadow: 1px 1px 2px black;&#13;
}&#13;
&#13;
.game-changer-icon {&#13;
  position: absolute;&#13;
  top: 0;&#13;
  right: 0;&#13;
  width: 20px;&#13;
  height: 20px;&#13;
  object-fit: cover;&#13;
  margin-top: 5px;&#13;
  margin-right: 5px;&#13;
}&#13;
&#13;
&#13;
.foil-overlay {&#13;
  position: absolute;&#13;
  top: 0;&#13;
  left: 0;&#13;
  width: 100%;&#13;
  height: 100%;&#13;
  pointer-events: none;&#13;
  opacity: 0.7;&#13;
  border-radius: 10px; /* Match card corners */&#13;
}&#13;
&#13;
.card-flipper {&#13;
  width: 100%;&#13;
  height: 100%;&#13;
  position: relative;&#13;
  transition: transform 0.6s;&#13;
  transform-style: preserve-3d;&#13;
}&#13;
&#13;
.card-flipper.flipped {&#13;
  transform: rotateY(180deg);&#13;
}&#13;
&#13;
.card-face {&#13;
  backface-visibility: hidden;&#13;
  position: absolute;&#13;
  width: 100%;&#13;
  height: 100%;&#13;
  border-radius: 5%;&#13;
  top: 0;&#13;
  left: 0;&#13;
}&#13;
&#13;
.front-face {&#13;
  z-index: 2;&#13;
}&#13;
&#13;
.back-face {&#13;
  transform: rotateY(180deg);&#13;
}&#13;
&#13;
.flip-button {&#13;
  position: absolute;&#13;
  bottom: 5px;&#13;
  right: 5px;&#13;
  background: rgba(255,255,255,0.8);&#13;
  border: none;&#13;
  border-radius: 50%;&#13;
  width: 30px;&#13;
  height: 30px;&#13;
  cursor: pointer;&#13;
  font-size: 1rem;&#13;
  z-index: 999;&#13;
}&#13;
&#13;
.hover-buttons {&#13;
  position: absolute;&#13;
  top: 8rem;&#13;
  right: 0px;&#13;
  display: flex;&#13;
  flex-direction: column;&#13;
  z-index: 30;&#13;
}&#13;
&#13;
.hover-btn {&#13;
  background-color: rgba(249,250,251,.05);&#13;
  border: 2px solid hsla(0,0%,100%,.5);&#13;
  width: 5rem;&#13;
  height: 5rem;&#13;
  font-size: 3.5rem;&#13;
  font-weight: bolder;&#13;
  color: white;&#13;
  cursor: pointer;&#13;
  transition: background-color .2s ease-in-out;&#13;
  padding: 0;&#13;
  line-height: 1;&#13;
  text-align: center;&#13;
}&#13;
&#13;
.hover-btn.card-modal {&#13;
  background-color: rgba(249,250,251,.05);&#13;
  border: 2px solid hsla(0,0%,100%,.5);&#13;
  font-size: 3.5rem;&#13;
  font-weight: bolder;&#13;
  width: 5rem;&#13;
  height: 5rem;&#13;
  z-index: 30;&#13;
  margin-top: 1rem;&#13;
}&#13;
&#13;
.hover-btn:hover {&#13;
  background-color: rgba(249,250,251,.3);&#13;
}&#13;
&#13;
.price-info {&#13;
  display:flex;&#13;
  justify-content:center;&#13;
}&#13;
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>mtg_deck_view</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>MTG Deck View</name>
        <option_schema/>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {
    var deckId = (typeof input !== 'undefined' && input.deck_id) ? input.deck_id : $sp.getParameter("deck_id");
    data.columns = {};
    data.deck_sys_id = deckId;

    if (!deckId) {
        data.error = "Missing deck_id";
        return;
    }

	var deckGR = new GlideRecord('x_759224_magic_c_0_mtg_deck');
	deckGR.addQuery('sys_id',deckId);
	deckGR.query();

	deckGR.next();

	data.deck_name = deckGR.getValue('name');
	

    var deckCardGR = new GlideRecord("x_759224_magic_c_0_deck_card");
    deckCardGR.addQuery("deck", deckId);
    deckCardGR.query();


    while (deckCardGR.next()) {
        var cardGR = deckCardGR.card.getRefRecord();
        if (!cardGR.isValidRecord()) continue;

        var frontImage = getImageURL(cardGR.getValue("front_image"));
		var backImage = getImageURL(cardGR.getValue("bakc_image"));

        var cardData = {
            name: cardGR.getValue("name"),
            quantity: deckCardGR.getValue("quantity"),
            price: cardGR.getValue("price"),
            foil: cardGR.getValue("foiling") != 'none',
            front_image_url: frontImage,
			back_iamge_url: backImage,
			has_back: !backImage,
			is_gc: cardGR.getValue("game_changer") == "1",
            is_commander: deckCardGR.getValue("is_commander") == "1",
            is_maybeboard: deckCardGR.getValue("is_maybeboard") == "1",
            is_sideboard: deckCardGR.getValue("is_sideboard") == "1"
        };

        let category = "";

        // Commander category renamed here
        if (cardData.is_commander) {
            category = "Commander";
        } else {
            var notes = deckCardGR.getValue("notes") || "";
            var trimmedNote = notes.trim();

            if (trimmedNote) {
                var tags = trimmedNote.split(",");
                if (tags.length && tags[0].trim()) {
                    category = tags[0].trim();
                }
            }

            if (!category) {
                if (cardData.is_maybeboard) {
                    category = "Maybeboard";
                } else if (cardData.is_sideboard) {
                    category = "Sideboard";
                }
            }

            if (!category) {
                var typeLine = (cardGR.getValue("type_line") || "").toLowerCase();
                typeLine = typeLine.replace(/legendary|basic|snow|token|tribal/g, '').trim();

                var typePriority = [{
                        type: "creature",
                        category: "Creature"
                    },
                    {
                        type: "planeswalker",
                        category: "Planeswalker"
                    },
                    {
                        type: "instant",
                        category: "Instant"
                    },
                    {
                        type: "sorcery",
                        category: "Sorcery"
                    },
                    {
                        type: "enchantment",
                        category: "Enchantment"
                    },
                    {
                        type: "artifact",
                        category: "Artifact"
                    },
                    {
                        type: "battle",
                        category: "Battle"
                    },
                    {
                        type: "land",
                        category: "Land"
                    }
                ];

                for (var i = 0; i < typePriority.length; i++) {
                    if (typeLine.indexOf(typePriority[i].type) !== -1) {
                        category = typePriority[i].category;
                        break;
                    }
                }

                if (!category) {
                    category = "Other";
                }
            }
        }

        if (!data.columns[category]) {
            data.columns[category] = [];
        }

        data.columns[category].push(cardData);
    }

    for (var column in data.columns) {
        data.columns[column].sort(function(a, b) {
            return a.name.localeCompare(b.name);
        });
    }

    // Rename here too: ensure Commander first
    if (data.columns["Commander"]) {
        const reordered = {
            "Commander": data.columns["Commander"]
        };

        Object.keys(data.columns).sort().forEach(function(key) {
            if (key !== "Commander") {
                reordered[key] = data.columns[key];
            }
        });

        data.columns = reordered;
    }

    function getImageURL(html) {
        if (!html) return "";
        var match = html.match(/<img[^>]+src="([^"]+)"/);
        return match ? match[1] : "";
    }
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-08-14 02:06:20</sys_created_on>
        <sys_id>4adc539ec3db22100efafbfdd401314d</sys_id>
        <sys_mod_count>128</sys_mod_count>
        <sys_name>MTG Deck View</sys_name>
        <sys_package display_value="Magic Collection" source="x_759224_magic_c_0">c09f498f9741a1107720f0571153afe1</sys_package>
        <sys_policy/>
        <sys_scope display_value="Magic Collection">c09f498f9741a1107720f0571153afe1</sys_scope>
        <sys_update_name>sp_widget_4adc539ec3db22100efafbfdd401314d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-09-02 13:20:48</sys_updated_on>
        <template><![CDATA[<div class="deck-container">
  <!-- Wrapping Deck Columns -->
  <div class="deck-columns" id="dynamic-deck-columns">
  </div>

  <!-- Anchored Columns: Maybeboard + Sideboard -->
  <div class="deck-anchored-columns">
    <div class="deck-column"
         ng-repeat="col in columnsList track by col.key"
         ng-if="col.key === 'Maybeboard' || col.key === 'Sideboard'">
      <div class="deck-column-header">
        {{ col.key }} <span class="column-count">({{ col.totalQuantity }})</span>
      </div>

      <div class="card-stack">
        <div class="stacked-card"
             ng-repeat="card in col.cards"
             ng-style="{'z-index': ($index + 1) * 10}">
          <div class="image-container">
            <img class="image" ng-src="{{card.front_image_url}}" alt="{{card.name}}" />
            <div class="quantity-tag">{{card.quantity}}</div>
            <div class="game-changer-tag" ng-if="card.is_gc">
              <img src='x_759224_magic_c_0.game_changer_diamond.png' class="game-changer-icon"/>
            </div>
            <img class="foil-overlay" src="x_759224_magic_c_0.foil.png" ng-if="card.foil"/>

            <div class="hover-buttons">
              <button class="hover-btn plus" ng-click="incrementCard(card, $event)">+</button>
              <button class="hover-btn minus" ng-click="decrementCard(card, $event)">−</button>
              <button class="hover-btn card-modal" ng-click="openCardModal(card, $event)">></button>
            </div>
          </div>
          <div class="price-info">
            <div class="prices">Price: ${{card.price}} </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
]]></template>
    </sp_widget>
</record_update>
