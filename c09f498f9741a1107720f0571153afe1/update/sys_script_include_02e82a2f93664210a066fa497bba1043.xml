<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_759224_magic_c_0.symbology_utils</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description>Utilities to manage the various symbols found in magic cards.</description>
        <mobile_callable>false</mobile_callable>
        <name>symbology_utils</name>
        <sandbox_callable>true</sandbox_callable>
        <script><![CDATA[var symbology_utils = Class.create();
symbology_utils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

    initialize: function() {
        this.symbolsPrefix = gs.getProperty('x_759224_magic_c_0.application_prefix', 'x_759224_magic_c_0/');
        this.defaultWidth = gs.getProperty('x_759224_magic_c_0.symbol_width_default', '1.5rem');
        this.symbolWidthMap = this._parseWidthExceptions(
            gs.getProperty('x_759224_magic_c_0.symbol_width_exceptions', '{100}:2rem,{1000000}:5rem,{∞}:2rem')
        );
    },

    /**
     * Parses a property string like: "{100}:2rem,{1000000}:5rem"
     * into an object: { "{100}": "2rem", "{1000000}": "5rem" }
     */
    _parseWidthExceptions: function(raw) {
        var map = {};
        var parts = raw.split(',');
        for (var i = 0; i < parts.length; i++) {
            var kv = parts[i].split(':');
            if (kv.length === 2) {
                map[kv[0].trim()] = kv[1].trim();
            }
        }
        return map;
    },

    /**
     * Replaces symbol codes in a string with image <img> tags
     */
    convertSymbolsToImages: function(input) {
        if (!input) return '';

        // Replace newline chars with line breaks
        input = input.replace(/\n/g, '<br/>');

        // Match all symbol patterns like {W}, {1}, {B/R}, etc.
        var self = this;
        return input.replace(/\{[^}]+\}/g, function(match) {
            var imageName = self.symbolsPrefix + (self._symbolMap[match] || '');
            var width = self.symbolWidthMap[match] || self.defaultWidth;

            if (!imageName || imageName === self.symbolsPrefix) return match; // fallback to original text

            return '<img id="mtg-icon" style="width:' + width + ';" src="' + imageName + '" />';
        });
    },
	
    convertImageUrisToHtml: function(card, isDoubleFaced) {
        if (!card)
            return {};

        var baseImgStyle = 'width:244px; height:340px; display:block; position:relative;';
        var isGameChanger = card.game_changer === true;
        var foiling = card.foiling;
        var isFoil = (foiling === 'foil' || foiling === 'etched');
        var foilOverlayImg = 'x_759224_magic_c_0.foil.png';

        function buildImageHtml(url, altText) {
            if (isGameChanger) {
                return '' +
                    '<div style="position: relative; width: 200px; height: 280px;">' +
                    '<img id="fImg" width="200" height="280" src="' + url + '" style="display:block;" alt="' + altText + '" />' +
                    (isFoil ?
                        '<img src="' + foilOverlayImg + '" ' +
                        'style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +
                        'pointer-events: none; mix-blend-mode: screen; opacity: 0.5; z-index: 5;" />' :
                        '') +
                    '<div style="position: absolute; top: 0; left: 0; width: 0; height: 0; ' +
                    'border-style: solid; border-width: 2rem; border-color: #c5681b transparent transparent #c5681b; ' +
                    'border-radius: 8px 0 0 0; z-index: 10;"></div>' +
                    '<span style="position: absolute; top: 1.5rem; transform: rotate(-45deg); transform-origin: top left; ' +
                    'z-index: 100; color: white; font-size: 1.75rem; font-weight: bold; font-family: sans-serif; ' +
                    'line-height: 1; pointer-events: none;">GC</span>' +
                    '</div>';
            } else {
                return '' +
                    '<div style="position: relative; width: 200px; height: 280px;">' +
                    '<img id="fImg" width="200" height="280" src="' + url + '" alt="' + altText + '" />' +
                    (isFoil ?
                        '<img src="' + foilOverlayImg + '" ' +
                        'style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +
                        'pointer-events: none; mix-blend-mode: screen; opacity: 0.5;" />' :
                        '') +
                    '</div>';
            }
        }

        function transformImageUris(imageUris, cardName) {
            var result = {};
            for (var key in imageUris) {
                if (imageUris.hasOwnProperty(key)) {
                    var url = imageUris[key];
                    if (!url || typeof url !== 'string') continue;
                    var altText = cardName + ' - ' + key + ' image';
                    result[key] = buildImageHtml(url, altText);
                }
            }
            return result;
        }

        if (isDoubleFaced && Array.isArray(card.card_faces) && !card.image_uris) {
            for (var i = 0; i < card.card_faces.length; i++) {
                var face = card.card_faces[i];
                if (face.image_uris) {
                    face.image_uris = transformImageUris(face.image_uris, face.name || ('Face ' + i));
                }
            }
            return card.card_faces;
        } else {
            if (card.image_uris) {
                card.image_uris = transformImageUris(card.image_uris, card.name);
            }
            return card.image_uris || {};
        }
    },

    formatLegalities: function(legalities, gc) {
        if (!legalities || typeof legalities !== 'object') return {};

        const legalHTML = '<p style="color:green;"><img style="width:1.5rem; padding-bottom:4px;" src="x_759224_magic_c_0.success_icon.svg" />Legal</p>';
        const gameChangerHTML = '<p style="color:orange;"><img style="width:3rem; padding-bottom:4px;" src="x_759224_magic_c_0.game_changer.png" />Legal</p>';
        const notLegalHTML = '<p style="color:red;"><img style="width:1.5rem; padding-bottom:4px;" src="x_759224_magic_c_0.failure_icon.svg" />Not Legal</p>';

        var formatted = {};

        for (var key in legalities) {
            if (legalities.hasOwnProperty(key)) {
                const value = legalities[key];

                if (value === 'not_legal') {
                    formatted[key] = notLegalHTML;
                } else {
                    if (gc === true && key === 'commander') {
                        formatted[key] = gameChangerHTML;
                    } else {
                        formatted[key] = legalHTML;
                    }
                }
            }
        }

        return formatted;
    },

    /**
     * Full symbol map for MTG symbols to image file names
     */
    _symbolMap: {
        '{W}': 'white_mana.svg',
        '{U}': 'blue_mana.svg',
        '{B}': 'black_mana.svg',
        '{R}': 'red_mana.svg',
        '{G}': 'green_mana.svg',
        '{C}': 'colorless_mana.svg',
        '{S}': 'snow_mana.svg',
        '{W/P}': 'phyrexian_white_mana.svg',
        '{U/P}': 'phyrexian_blue_mana.svg',
        '{B/P}': 'phyrexian_black_mana.svg',
        '{R/P}': 'phyrexian_red_mana.svg',
        '{G/P}': 'phyrexian_green_mana.svg',
        '{B/G/P}': 'phyrexian_black_green_mana.svg',
        '{B/R/P}': 'phyrexian_black_red_mana.svg',
        '{G/U/P}': 'phyrexian_green_blue_mana.svg',
        '{G/W/P}': 'phyrexian_green_white_mana.svg',
        '{R/G/P}': 'phyrexian_red_green_mana.svg',
        '{R/W/P}': 'phyrexian_red_white_mana.svg',
        '{U/B/P}': 'phyrexian_blue_black_mana.svg',
        '{U/R/P}': 'phyrexian_blue_red_mana.svg',
        '{W/B/P}': 'phyrexian_white_black_mana.svg',
        '{W/U/P}': 'phyrexian_white_blue_mana.svg',
        '{W/U}': 'white_blue_mana.svg',
        '{W/B}': 'white_black_mana.svg',
        '{B/R}': 'black_red_mana.svg',
        '{B/G}': 'black_green_mana.svg',
        '{U/B}': 'blue_black_mana.svg',
        '{U/R}': 'blue_red_mana.svg',
        '{R/G}': 'red_green_mana.svg',
        '{R/W}': 'red_white_mana.svg',
        '{G/W}': 'white_blue_mana.svg',
        '{G/U}': 'white_blue_mana.svg',
        '{C/W}': 'colorless_white_mana.svg',
        '{C/U}': 'colorless_blue_mana.svg',
        '{C/B}': 'colorless_black_mana.svg',
        '{C/R}': 'colorless_red_mana.svg',
        '{C/G}': 'colorless_green_mana.svg',
        '{2/W}': 'generic_2_white_mana.svg',
        '{2/U}': 'generic_2_blue_mana.svg',
        '{2/B}': 'generic_2_black_mana.svg',
        '{2/R}': 'generic_2_red_mana.svg',
        '{2/G}': 'generic_2_green_mana.svg',
        '{0}': 'generic_0.svg',
        '{½}': 'generic_half.svg',
        '{1}': 'generic_1.svg',
        '{2}': 'generic_2.svg',
        '{3}': 'generic_3.svg',
        '{4}': 'generic_4.svg',
        '{5}': 'generic_5.svg',
        '{6}': 'generic_6.svg',
        '{7}': 'generic_7.svg',
        '{8}': 'generic_8.svg',
        '{9}': 'generic_9.svg',
        '{10}': 'generic_10.svg',
        '{11}': 'generic_11.svg',
        '{12}': 'generic_12.svg',
        '{13}': 'generic_13.svg',
        '{14}': 'generic_14.svg',
        '{15}': 'generic_15.svg',
        '{16}': 'generic_16.svg',
        '{17}': 'generic_17.svg',
        '{18}': 'generic_18.svg',
        '{19}': 'generic_19.svg',
        '{20}': 'generic_20.svg',
        '{100}': 'generic_100.svg',
        '{1000000}': 'generic_1000000.svg',
        '{∞}': 'generic_infinity.svg',
        '{X}': 'generic_x.svg',
        '{Y}': 'generic_y.svg',
        '{Z}': 'generic_z.svg',
        '{HW}': 'half_white_mana.svg',
        '{HR}': 'half_red_mana.svg',
        '{E}': 'energy_counter.svg',
        '{A}': 'acorn_counter.svg',
        '{TK}': 'ticket_counter.svg',
        '{T}': 'tap.svg',
        '{Q}': 'untap.svg',
        '{PW}': 'planeswalker.svg',
        '{CHAOS}': 'chaos.svg',
        '{P}': 'phyrexian.svg'
    },

    type: 'symbology_utils'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-06-08 20:22:08</sys_created_on>
        <sys_id>02e82a2f93664210a066fa497bba1043</sys_id>
        <sys_mod_count>66</sys_mod_count>
        <sys_name>symbology_utils</sys_name>
        <sys_package display_value="Magic Collection" source="x_759224_magic_c_0">c09f498f9741a1107720f0571153afe1</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Magic Collection">c09f498f9741a1107720f0571153afe1</sys_scope>
        <sys_update_name>sys_script_include_02e82a2f93664210a066fa497bba1043</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-08-03 01:18:27</sys_updated_on>
    </sys_script_include>
</record_update>
