<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_759224_magic_c_0_mtg_cards</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>New Card Added</name>
        <order>200</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

	//gs.info('Here 1')
    var id = current.sets.getDisplayValue();
    var name = current.name;
    name = name.toString().replaceAll(' ', '');
	var foil = current.foiling;
    var cn = current.collector_number;
    var endpoint = constructUrl(name, id, cn);
	//gs.info('Here 2: '+ endpoint);
    var response = apiCall(endpoint);
	//gs.info('Here 3: ' + response.code);
	//gs.info('Here 4: ' + JSON.stringify(response.body));

    if (response.code.toString() == '200') {
		gs.info('Here 5: 200 code');
        updateCard(response.body, foil, endpoint, cn);
		gs.info('Here 7: Post update');
    } else {
        current.setAbortAction(true);
    }

    //Input: card name, sets, and cn values
    //Function: using the inputs create the url endpoint for the card
    //Return: url endpoint

    function constructUrl(name, sets, cn) {
        var url = '?q=set:';
        if (cn != '') {
            url = url + sets + '+' + name + '+cn:' + cn;
        } else {
            url = url + id + '+' + name;
        }
        return (url);
    }

    //Input: Url endpoint
    //Function: using the provided url make API call
    //Return: Response object

    function apiCall(url) {
        try {
            var r = new sn_ws.RESTMessageV2('x_759224_magic_c_0.ScryFall API', 'Card GET');
            r.setStringParameterNoEscape('query', url);
            var response = r.execute();
            var httpStatus = response.getStatusCode();
        } catch (ex) {
            var message = ex.message;
        }
        var parsedResponse = JSON.parse(response.getBody());
        var responseObj = {
            code: httpStatus,
            body: parsedResponse
        };
        return (responseObj);
    }

    //Input: Parsed Response object
    //Function: serve as the parent function to house all the children update functions
    //Return: None

    function updateCard(response, foil, url, cn) {

		gs.info('Here 6: ' + response.data[0].prices);

        if (cn == '') {
            setCn(response);
        }
        setPrice(response, foil);
        setLink(response, url, cn);
        setColors(response);
        setKeywords(response);
        setRarity(response);
        setDetails(response);
        setLinks(response);
        setReserved(response);

        //Update the card record with the data from scryfall
        current.update();
    }

    //Input: response, cn
    //Function: set the cn field on the 
    //Return: None

    function setCn(response) {
        current.setValue('collector_number', response.data[0].collector_number);
    }

    //Input: foil staus and response object
    //Function: set the price of the card based on the foil status
    //Return: None

    function setPrice(response, foil) {
        if (foil == "foil") {
			gs.info(response.data[0].prices.usd_foil);
            current.setValue('price', response.data[0].prices.usd_foil);
        } else if (foil == "etched") {
            current.setValue('price', response.data[0].prices.usd_etched);
        } else {
            current.setValue('price', response.data[0].prices.usd);
        }
    }

    //Input: response,url and cn
    //Function: Take the created endpoint and cn then create
    //Return: None

    function setLink(response, endpoint, cn) {
		gs.info(cn)
        var link = '';
        //if (cn == '') {
            link = "https://api.scryfall.com/cards/search" + endpoint + '+cn:' + cn;
        //} else {
        //    link = "https://api.scryfall.com/cards/search" + endpoint;
        //}
        current.setValue('api_link', link);
    }

    //Input: response
    //Function: set the colors field on the card
    //Return: None

    function setColors(response) {
        if (response.data[0].color_identity.length == 0) {
            current.setValue('colors', 'colorless');
        } else {
            current.setValue('colors', response.data[0].color_identity);
        }
    }

    //Input: response
    //Function: set the keyword field on the card
    //Return: None

    function setKeywords(response) {
        current.setValue('keywords', response.data[0].keywords);
    }

    //Input: response
    //Function: set the rarity field on the card
    //Return: None

    function setRarity(response) {
        current.setValue('rarity', response.data[0].rarity);
    }

    //Input: response
    //Function: Sets the images, type line and oracle fields on the 
    //Return: None

    function setDetails(response) {
        try {
            current.setValue('front_image', response.data[0].image_uris.normal);
            current.setValue('oracle', response.data[0].oracle_text);
            current.setValue('type_line', response.data[0].type_line);
        } catch {
            //Try to set the value of the front and back image fields if the front image failed
            try {
                var type_line = JSON.stringify(response.data[0].card_faces[0].type_line) + ' //  ' + JSON.stringify(response.data[0].card_faces[1].type_line);
                var oracle = response.data[0].card_faces[0].oracle_text + '\n\n' + response.data[0].card_faces[1].oracle_text;

                current.setValue('type_line', type_line);
                current.setValue('oracle', oracle);

                current.setValue('front_image', response.data[0].card_faces[0].image_uris.normal);
                current.setValue('back_image', response.data[0].card_faces[1].image_uris.normal);
            } catch {
                gs.info('Image failed to get added to card!');
            }
        }
    }

    //Input: response
    //Function: Set the links on the card record
    //Return: None

    function setLinks(response) {
        current.setValue('gatherer', response.data[0].related_uris.gatherer);
        current.setValue('edhrec', response.data[0].related_uris.edhrec);
    }

    //Input: response
    //Function: Set the reserved list field on the card
    //Return: None

    function setReserved(response) {
        current.setValue('reserved_list', JSON.stringify(response.data[0].reserved));
    }

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>greg</sys_created_by>
        <sys_created_on>2023-02-26 03:18:36</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>cd15fcf497d929107720f0571153af02</sys_id>
        <sys_mod_count>103</sys_mod_count>
        <sys_name>New Card Added</sys_name>
        <sys_overrides/>
        <sys_package display_value="Magic Collection" source="x_759224_magic_c_0">c09f498f9741a1107720f0571153afe1</sys_package>
        <sys_policy/>
        <sys_scope display_value="Magic Collection">c09f498f9741a1107720f0571153afe1</sys_scope>
        <sys_update_name>sys_script_cd15fcf497d929107720f0571153af02</sys_update_name>
        <sys_updated_by>greg</sys_updated_by>
        <sys_updated_on>2023-04-02 03:36:41</sys_updated_on>
        <template/>
        <when>async_always</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=cd15fcf497d929107720f0571153af02"/>
</record_update>
